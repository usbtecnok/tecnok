{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# tecnok - Community Transportation Platform\n\n## Overview\n\ntecnok is a community-based ride-sharing platform connecting passengers with local drivers in the Furnas, Agrícola, and Mata Machado regions of Brazil. This full-stack TypeScript application facilitates safe, affordable transportation through real-time ride matching, driver-passenger coordination, and live status tracking. Its core purpose is to provide a secure and reliable community transport service.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n\nThe frontend is built with React and TypeScript, utilizing Vite for fast development and optimized builds. Wouter handles client-side routing, while TanStack Query manages server state with caching and automatic refetching. UI components are built using Shadcn/ui (customizable, copied components) atop Radix UI primitives, styled with Tailwind CSS and CSS variables for dynamic theming (light/dark mode). Polling (3-5 seconds) is used for critical data updates (e.g., pending rides, driver locations) to simulate real-time interactions. Key components include `PassengerPanel`, `DriverPanel`, `MapPanel`, and global navigation.\n\n### Backend\n\nThe backend uses Node.js with Express.js and TypeScript. It features a RESTful API with separate modules for passenger (`/api/passenger/*`) and driver (`/api/driver/*`) specific endpoints, while maintaining legacy endpoints for compatibility. Drizzle ORM is used for type-safe database interactions with PostgreSQL (hosted on Neon serverless). Session management is handled by `connect-pg-simple` with PostgreSQL-backed sessions. The architecture is monolithic, serving both API and static files. Rides are manually assigned by drivers.\n\n### Database Design\n\nThe PostgreSQL database schema includes `drivers`, `passengers`, `rides`, `route_prices`, and `payments` tables.\n- **Drivers:** Stores driver details, including `email` (unique), `password` (bcrypt hashed), `pixKey` (for payment receipt), `termsAccepted` (compliance flag), `isApproved` status (0=pending, 1=approved), and `isOnline` status.\n- **Passengers:** Stores passenger `id`, `name`, and `phone`.\n- **Rides:** Links `passengerId` and `driverId`, stores `origin`, `destination`, `status` (pending, accepted, in_progress, completed, cancelled), and `estimatedPrice`.\n- **Route Prices:** Stores predefined `route` strings (e.g., \"Origin - Destination\") and their corresponding `price`.\n- **Payments:** Records platform payments to drivers, including `driverId`, `amount`, `pixKey`, `notes`, and `paidAt` timestamp.\nUUIDs are used as primary keys. Drizzle Kit manages schema migrations.\n\n### Core Features\n\n- **Driver Authentication & Approval:** Drivers register with email/password, which is bcrypt hashed. They must be manually approved (`isApproved = 1`) by an administrator (via web interface or direct SQL) before they can log in. Session-based authentication secures access to the driver panel. Cookie configuration uses `secure: false` and `sameSite: \"lax\"` to ensure compatibility with PWA installations.\n- **Driver Notification System:** Real-time push notifications alert drivers to new ride requests via Browser Notification API (desktop notifications), Web Audio API (sound alerts), and in-app toast messages (Shadcn UI). It detects new rides based on ID comparison and notifies for every new ride, including the first one.\n- **Fixed Route Pricing:** Implemented 27 predefined routes with fixed prices, automatically seeded on startup. Price lookup uses normalized string matching (case-insensitive, accent-insensitive). For routes not in the table, uses Uber-style calculation: R$5.00 base + R$2.00/km (default 10km estimate = R$25.00*), displayed with asterisk to indicate estimate.\n- **Ride History:** Comprehensive ride history for both passengers and drivers.\n- **Ride Completion & Pix Payment:** Drivers can complete rides from the \"Corridas em Andamento\" section using the \"Finalizar Corrida e Liberar Pagamento\" button. Upon completion, a Pix payment modal automatically opens displaying ride details and payment information for platform beneficiary Aparecido de Góes (CPF: 07217640881). The modal includes a one-click copy feature for the Pix key and confirmation toast. Active rides are fetched via `/api/driver/rides/active?driverId={id}` with 5-second polling using a custom TanStack Query queryFn.\n- **Driver Financial Dashboard:** Real-time financial tracking displays completed rides count, total earnings, platform fee (R$1.00 per ride), and net amount receivable. Drivers register their Pix key during signup and must accept terms including fee structure, withdrawal process, liability disclaimers, and employment status clarification. Financial data is fetched via authenticated `/api/driver/earnings/:driverId` endpoint.\n- **Payment History:** Comprehensive payment history showing all received payments with date, amount, Pix key used, and optional notes. Accessed via authenticated `/api/driver/payments/:driverId` endpoint. Payments are recorded by administrators and displayed in reverse chronological order. Empty states guide drivers to contact administration for withdrawal requests.\n- **PWA Installation:** Progressive Web App support allows users to install the platform as a standalone mobile app. Service worker (`client/public/sw.js`) uses network-first strategy for HTML navigation (ensures latest updates) and cache-first for static assets. Auto-reload mechanism updates installed apps when new versions deploy. Manual install button appears for browsers that don't show automatic install prompt.\n- **Real-Time Interactive Map:** Leaflet.js integration with OpenStreetMap displays online drivers on a live map centered on Furnas/RJ (lat: -22.51, lng: -43.71). Red markers represent online drivers with simulated movement every 3 seconds for demo purposes. Map updates via polling (3-second intervals) to fetch driver locations. No API key required (free, open-source solution). Proper memory management ensures markers are removed when drivers go offline and animation intervals are cleaned up on component unmount.\n- **Administrative System:** Secure admin panel at `/admin/login` for managing platform operations. Protected by session-based authentication with `ensureAdmin` middleware on all admin routes (`/api/rides`, `/api/drivers/all`, `/api/driver/pending`, `/api/driver/:id/approve`). Login requires email and password. Admin credentials: Email: `admin@tecnok.com.br` / Senha: `admin123`. Includes driver approval management and payment recording capabilities. Session cookies are httpOnly with `sameSite: lax` and `secure: true` in production. All admin pages feature loading states and authentication guards for proper UX.\n\n## External Dependencies\n\n- **Database & ORM:**\n    - `@neondatabase/serverless`: PostgreSQL driver\n    - `drizzle-orm`: Type-safe ORM for PostgreSQL\n    - `drizzle-zod`: Schema validation integration\n- **Authentication & Sessions:**\n    - `connect-pg-simple`: PostgreSQL session store for Express\n    - `bcryptjs`: Password hashing\n- **Frontend UI & State:**\n    - `@radix-ui/*`: Unstyled, accessible UI primitives\n    - `@tanstack/react-query`: Server state management\n    - `tailwindcss`: Utility-first CSS framework\n    - `lucide-react`: Icon library\n    - `date-fns`: Date formatting and manipulation\n    - `leaflet`: Interactive maps with OpenStreetMap (free, no API key)\n- **Validation:**\n    - `zod`: Runtime type validation\n    - `@hookform/resolvers`: React Hook Form integration with Zod\n- **Development Tools:**\n    - `Vite`: Fast development server and production builds\n    - `tsx`: TypeScript execution for development\n    - `esbuild`: JavaScript bundler\n    - `@replit/vite-plugin-*`: Replit-specific enhancements\n- **Environment Variables:** `DATABASE_URL` (PostgreSQL connection), `SESSION_SECRET` (mandatory for session encryption).","size_bytes":7939},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/complete-rides.ts":{"content":"import { db } from \"./db\";\nimport { rides } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nasync function completeRides() {\n  console.log(\"Marcando corridas como concluídas...\");\n\n  const allRides = await db.select().from(rides);\n  \n  if (allRides.length === 0) {\n    console.log(\"Nenhuma corrida encontrada\");\n    return;\n  }\n\n  // Mark first ride as completed\n  if (allRides.length > 0) {\n    await db.update(rides)\n      .set({ \n        status: 'completed',\n        completedAt: new Date()\n      })\n      .where(eq(rides.id, allRides[0].id));\n    console.log(`Corrida ${allRides[0].id.slice(0,8)} marcada como concluída`);\n  }\n\n  console.log(\"Concluído!\");\n  process.exit(0);\n}\n\ncompleteRides().catch((error) => {\n  console.error(\"Erro:\", error);\n  process.exit(1);\n});\n","size_bytes":787},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedRoutePrices } from \"./seed-route-prices\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\n\ndeclare module 'express-session' {\n  interface SessionData {\n    driverId: string;\n    isAdmin: boolean;\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Seed route prices on startup\n  await seedRoutePrices();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2441},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertRideSchema, insertPassengerSchema, insertDriverSchema } from \"@shared/schema\";\nimport passengerRoutes from \"./routes/passenger\";\nimport driverRoutes from \"./routes/driver\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { db } from \"./db\";\nimport bcrypt from \"bcryptjs\";\nimport QRCode from \"qrcode\";\nimport { z } from \"zod\";\nimport { ensureAdmin } from \"./middleware/admin-auth\";\n\nfunction normalizeRoute(str: string): string {\n  return str\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .trim()\n    .replace(/\\s+/g, \" \");\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const PgStore = connectPgSimple(session);\n  \n  if (!process.env.SESSION_SECRET) {\n    throw new Error(\"SESSION_SECRET environment variable is required but not set. Please configure it before starting the application.\");\n  }\n  \n  app.use(\n    session({\n      store: new PgStore({\n        conObject: {\n          connectionString: process.env.DATABASE_URL,\n        },\n        createTableIfMissing: true,\n      }),\n      secret: process.env.SESSION_SECRET,\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"lax\",\n      },\n    })\n  );\n  \n  app.use(\"/api/passenger\", passengerRoutes);\n  app.use(\"/api/driver\", driverRoutes);\n\n  app.post(\"/api/rides\", async (req, res) => {\n    try {\n      const { passengerName, passengerPhone, ...rideFields } = req.body;\n      \n      let passenger = await storage.getPassengerByPhone(passengerPhone);\n      if (!passenger) {\n        passenger = await storage.createPassenger({\n          name: passengerName || \"Passageiro\",\n          phone: passengerPhone\n        });\n      }\n\n      const routeKey = `${rideFields.origin} - ${rideFields.destination}`;\n      const normalizedInput = normalizeRoute(routeKey);\n      \n      const allRoutePrices = await storage.getAllRoutePrices();\n      const matchedRoute = allRoutePrices.find(rp => \n        normalizeRoute(rp.route) === normalizedInput\n      );\n      \n      let estimatedPrice: string;\n      if (matchedRoute) {\n        // Usa preço fixo da tabela\n        estimatedPrice = `R$ ${matchedRoute.price}`;\n      } else {\n        // Cálculo estilo Uber: R$ 5 (base) + R$ 2/km estimado\n        // Estimativa inicial: 10km média para rotas não cadastradas\n        const baseUber = 5.00;\n        const estimatedKm = 10; // será substituído pelo Mapbox depois\n        const ratePerKm = 2.00;\n        const calculatedPrice = baseUber + (estimatedKm * ratePerKm);\n        estimatedPrice = `R$ ${calculatedPrice.toFixed(2)} *`;\n      }\n\n      const rideData = insertRideSchema.parse({\n        origin: rideFields.origin,\n        destination: rideFields.destination,\n        passengerCount: rideFields.passengerCount,\n        passengerId: passenger.id,\n        status: \"pending\",\n        estimatedPrice,\n        driverId: null\n      });\n\n      const ride = await storage.createRide(rideData);\n      res.json(ride);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid ride data\" });\n    }\n  });\n\n  app.get(\"/api/rides\", ensureAdmin, async (req, res) => {\n    try {\n      const rides = await storage.getAllRides();\n      res.json(rides);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch rides\" });\n    }\n  });\n\n  app.post(\"/api/rides/by-phone\", async (req, res) => {\n    try {\n      const { phone } = req.body;\n      if (!phone) {\n        return res.status(400).json({ error: \"Phone number is required\" });\n      }\n      \n      const passenger = await storage.getPassengerByPhone(phone);\n      if (!passenger) {\n        return res.json([]);\n      }\n      \n      const rides = await storage.getRidesByPassenger(passenger.id);\n      res.json(rides);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch rides\" });\n    }\n  });\n\n  app.get(\"/api/rides/pending\", async (req, res) => {\n    try {\n      const pendingRides = await storage.getPendingRides();\n      res.json(pendingRides);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pending rides\" });\n    }\n  });\n\n  app.patch(\"/api/rides/:id/status\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, driverId } = req.body;\n      \n      console.log(\"🚕 Atualizando status da corrida:\", { id, status, driverId });\n      \n      const updatedRide = await storage.updateRideStatus(id, status, driverId);\n      if (!updatedRide) {\n        console.error(\"❌ Corrida não encontrada:\", id);\n        return res.status(404).json({ error: \"Ride not found\" });\n      }\n      \n      console.log(\"✅ Corrida atualizada com sucesso:\", updatedRide);\n      res.json(updatedRide);\n    } catch (error) {\n      console.error(\"❌ Erro ao atualizar status da corrida:\", error);\n      res.status(500).json({ error: \"Failed to update ride status\" });\n    }\n  });\n\n  app.patch(\"/api/rides/:id/payment-method\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { paymentMethod } = req.body;\n      \n      if (!paymentMethod || !['pix', 'cash'].includes(paymentMethod)) {\n        return res.status(400).json({ error: \"Invalid payment method\" });\n      }\n      \n      const updatedRide = await storage.updateRidePaymentMethod(id, paymentMethod);\n      if (!updatedRide) {\n        return res.status(404).json({ error: \"Ride not found\" });\n      }\n      \n      res.json(updatedRide);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update payment method\" });\n    }\n  });\n\n  app.post(\"/api/drivers\", async (req, res) => {\n    try {\n      const driverData = insertDriverSchema.parse(req.body);\n      const hashedPassword = await bcrypt.hash(driverData.password, 10);\n      const driver = await storage.createDriver({\n        ...driverData,\n        password: hashedPassword,\n      });\n      const { password, ...driverWithoutPassword } = driver;\n      res.json(driverWithoutPassword);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid driver data\" });\n    }\n  });\n\n  app.get(\"/api/drivers\", async (req, res) => {\n    try {\n      const drivers = await storage.getAllDrivers();\n      const driversWithoutPassword = drivers.map(({ password, ...driver }) => driver);\n      res.json(driversWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch drivers\" });\n    }\n  });\n\n  app.get(\"/api/drivers/all\", ensureAdmin, async (req, res) => {\n    try {\n      const allDrivers = await storage.getAllDrivers();\n      const driversWithoutPassword = allDrivers.map(({ password, ...driver }) => driver);\n      res.json(driversWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch all drivers\" });\n    }\n  });\n\n  app.patch(\"/api/drivers/:id/status\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { isOnline } = req.body;\n      \n      const updatedDriver = await storage.updateDriverStatus(id, isOnline);\n      if (!updatedDriver) {\n        return res.status(404).json({ error: \"Driver not found\" });\n      }\n      \n      const { password, ...driverWithoutPassword } = updatedDriver;\n      res.json(driverWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update driver status\" });\n    }\n  });\n\n  app.patch(\"/api/drivers/:id/location\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { latitude, longitude } = req.body;\n      \n      const updatedDriver = await storage.updateDriverLocation(id, latitude, longitude);\n      if (!updatedDriver) {\n        return res.status(404).json({ error: \"Driver not found\" });\n      }\n      \n      const { password, ...driverWithoutPassword } = updatedDriver;\n      res.json(driverWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update driver location\" });\n    }\n  });\n\n  app.post(\"/api/passengers\", async (req, res) => {\n    try {\n      const passengerData = insertPassengerSchema.parse(req.body);\n      const passenger = await storage.createPassenger(passengerData);\n      res.json(passenger);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid passenger data\" });\n    }\n  });\n\n  app.get(\"/api/route-prices\", async (req, res) => {\n    try {\n      const routePrices = await storage.getAllRoutePrices();\n      res.json(routePrices);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch route prices\" });\n    }\n  });\n\n  function generatePixPayload(pixKey: string, merchantName: string, amount: string, city: string = \"Brasil\", description: string = \"\"): string {\n    function crc16(str: string): string {\n      let crc = 0xFFFF;\n      for (let i = 0; i < str.length; i++) {\n        crc ^= str.charCodeAt(i) << 8;\n        for (let j = 0; j < 8; j++) {\n          if (crc & 0x8000) {\n            crc = (crc << 1) ^ 0x1021;\n          } else {\n            crc = crc << 1;\n          }\n        }\n      }\n      return (crc & 0xFFFF).toString(16).toUpperCase().padStart(4, '0');\n    }\n\n    function generateTxId(input: string): string {\n      const clean = input.toUpperCase().replace(/[^A-Z0-9]/g, '');\n      const txid = clean.slice(0, 25);\n      return txid.length > 0 ? txid : \"tecnok\";\n    }\n\n    const payloadFormatIndicator = \"000201\";\n    \n    let merchantAccountInfo = `0014BR.GOV.BCB.PIX01${String(pixKey.length).padStart(2, '0')}${pixKey}`;\n    if (description) {\n      const descTag = `02${String(description.length).padStart(2, '0')}${description}`;\n      merchantAccountInfo += descTag;\n    }\n    \n    const merchantCategoryCode = \"52040000\";\n    const transactionCurrency = \"5303986\";\n    const transactionAmount = amount ? `54${String(amount.length).padStart(2, '0')}${amount}` : \"\";\n    const countryCode = \"5802BR\";\n    const merchantNameTag = `59${String(merchantName.length).padStart(2, '0')}${merchantName}`;\n    const merchantCityTag = `60${String(city.length).padStart(2, '0')}${city}`;\n    \n    const txid = generateTxId(description || \"tecnok\");\n    const additionalDataField = `62${String(4 + txid.length).padStart(2, '0')}05${String(txid.length).padStart(2, '0')}${txid}`;\n    \n    const payload = `${payloadFormatIndicator}26${String(merchantAccountInfo.length).padStart(2, '0')}${merchantAccountInfo}${merchantCategoryCode}${transactionCurrency}${transactionAmount}${countryCode}${merchantNameTag}${merchantCityTag}${additionalDataField}6304`;\n    \n    return payload + crc16(payload);\n  }\n\n  const pixQrCodeSchema = z.object({\n    amount: z.string().refine((val) => {\n      const num = parseFloat(val.replace(',', '.'));\n      return !isNaN(num) && num >= 0;\n    }, { message: \"Valor inválido\" }),\n    description: z.string().max(50).optional()\n  });\n\n  app.post(\"/api/payments/pix-qrcode\", async (req, res) => {\n    try {\n      const validated = pixQrCodeSchema.parse(req.body);\n      \n      const amountValue = parseFloat(validated.amount.replace(',', '.')).toFixed(2);\n      const description = validated.description?.slice(0, 50) || \"\";\n      \n      const pixKey = \"07217640881\";\n      const merchantName = \"Aparecido de Goes\";\n      const city = \"Brasil\";\n      \n      const pixPayload = generatePixPayload(pixKey, merchantName, amountValue, city, description);\n      const qrCodeDataURL = await QRCode.toDataURL(pixPayload);\n      \n      res.json({\n        pixPayload,\n        qrCode: qrCodeDataURL,\n        pixKey,\n        amount: amountValue,\n        merchantName\n      });\n    } catch (error) {\n      console.error(\"Error generating Pix QR Code:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Dados inválidos\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to generate Pix QR Code\" });\n    }\n  });\n\n  // Admin authentication routes\n  app.post(\"/api/admin/login\", (req, res) => {\n    const { email, senha } = req.body;\n    \n    if (email === \"admin@tecnok.com.br\" && senha === \"admin123\") {\n      req.session.isAdmin = true;\n      return res.json({ success: true });\n    }\n    \n    res.status(401).json({ error: \"Credenciais inválidas\" });\n  });\n\n  app.post(\"/api/admin/logout\", async (req, res) => {\n    if (req.session) {\n      req.session.isAdmin = false;\n      req.session.save((err) => {\n        if (err) {\n          return res.status(500).json({ error: \"Erro ao fazer logout\" });\n        }\n        res.json({ message: \"Logout realizado com sucesso\" });\n      });\n    } else {\n      res.json({ message: \"Nenhuma sessão ativa\" });\n    }\n  });\n\n  app.get(\"/api/admin/check\", async (req, res) => {\n    const isAuthenticated = req.session?.isAdmin === true;\n    res.json({ authenticated: isAuthenticated });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13038},"server/seed-route-prices.ts":{"content":"import { storage } from \"./storage\";\n\nconst routePricesData = [\n  { route: 'Alto - Maracai/Tijuca/Mato Machado', price: '10.00' },\n  { route: 'Alto - Açude/Casa do Alto/Mansão Rosa', price: '12.00' },\n  { route: 'Alto - Agrícola/Valeriano/Furnas', price: '10.00' },\n  { route: 'Alto - Estrada Velha Montanha e Cedae', price: '20.00' },\n  { route: 'Alto - Floresta da Tijuca', price: '20.00' },\n  { route: 'Alto - Gávea Pna/Biguá', price: '15.00' },\n  { route: 'Alto - Gervásio S./Córrego A.', price: '10.00' },\n  { route: 'Alto - Rampa portão', price: '10.00' },\n  { route: 'Alto - Silva Aereal', price: '12.00' },\n  { route: 'Alto - Soberbo/Taquara do Alto', price: '15.00' },\n  { route: 'Alto - Violão', price: '15.00' },\n  { route: 'Alto - Vista Chinesa após cabine', price: '22.00' },\n  { route: 'Alto - Botafogo', price: '50.00' },\n  { route: 'Alto - Catete/Glória/Leme', price: '55.00' },\n  { route: 'Alto - Copacabana', price: '55.00' },\n  { route: 'Alto - Favelinha/Icanoas', price: '35.00' },\n  { route: 'Alto - Flamengo/Vívo rio/Lgo Machado', price: '55.00' },\n  { route: 'Alto - Gávea/Leblon', price: '45.00' },\n  { route: 'Alto - Humaitá', price: '45.00' },\n  { route: 'Alto - Ipanema', price: '50.00' },\n  { route: 'Alto - Jardim Botânico', price: '42.00' },\n  { route: 'Alto - Laranjeiras/Cosme Velho', price: '42.00' },\n  { route: 'Alto - São Conrado', price: '35.00' },\n  { route: 'Alto - Urca/Marina da Glória', price: '60.00' },\n  { route: 'Alto - Aeroporto Galeão', price: '85.00' },\n  { route: 'Alto - Aeroportos Santos Dumont', price: '75.00' },\n  { route: 'Alto - Rodoviária Novo Rio', price: '50.00' },\n];\n\nexport async function seedRoutePrices() {\n  try {\n    // Check if route prices already exist\n    const existingPrices = await storage.getAllRoutePrices();\n    \n    if (existingPrices.length === 0) {\n      console.log('Seeding route prices...');\n      await storage.bulkCreateRoutePrices(routePricesData);\n      console.log(`Successfully seeded ${routePricesData.length} route prices!`);\n    } else {\n      console.log(`Route prices already seeded (${existingPrices.length} routes found)`);\n    }\n  } catch (error) {\n    console.error('Error seeding route prices:', error);\n  }\n}\n","size_bytes":2228},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { drivers } from \"@shared/schema\";\n\nasync function seed() {\n  console.log(\"🌱 Seeding database...\");\n\n  // Check if drivers already exist\n  const existingDrivers = await db.select().from(drivers);\n  if (existingDrivers.length > 0) {\n    console.log(\"✅ Database already seeded\");\n    return;\n  }\n\n  // Create mock drivers\n  const mockDrivers = [\n    {\n      name: \"João Silva\",\n      phone: \"+5521999123456\",\n      vehicleModel: \"Civic 2020\",\n      vehiclePlate: \"ABC-1234\",\n      isOnline: 1,\n      latitude: \"-22.9068\",\n      longitude: \"-43.1729\"\n    },\n    {\n      name: \"Maria Santos\",\n      phone: \"+5521999234567\",\n      vehicleModel: \"Corolla 2019\",\n      vehiclePlate: \"DEF-5678\",\n      isOnline: 1,\n      latitude: \"-22.9128\",\n      longitude: \"-43.1819\"\n    },\n    {\n      name: \"Pedro Costa\",\n      phone: \"+5521999345678\",\n      vehicleModel: \"HB20 2021\",\n      vehiclePlate: \"GHI-9012\",\n      isOnline: 0,\n      latitude: \"-22.9088\",\n      longitude: \"-43.1759\"\n    }\n  ];\n\n  for (const driver of mockDrivers) {\n    await db.insert(drivers).values(driver);\n  }\n\n  console.log(\"✅ Database seeded successfully with 3 drivers\");\n  process.exit(0);\n}\n\nseed().catch((error) => {\n  console.error(\"❌ Error seeding database:\", error);\n  process.exit(1);\n});\n","size_bytes":1306},"server/storage.ts":{"content":"import { type Driver, type Passenger, type Ride, type RoutePrice, type Payment, type InsertDriver, type InsertPassenger, type InsertRide, type InsertRoutePrice, type InsertPayment, drivers, passengers, rides, routePrices, payments } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Driver methods\n  getDriver(id: string): Promise<Driver | undefined>;\n  getDriverById(id: string): Promise<Driver | undefined>;\n  getDriverByPhone(phone: string): Promise<Driver | undefined>;\n  getDriverByEmail(email: string): Promise<Driver | undefined>;\n  getAllDrivers(): Promise<Driver[]>;\n  createDriver(driver: InsertDriver): Promise<Driver>;\n  updateDriverStatus(id: string, isOnline: number): Promise<Driver | undefined>;\n  getOnlineDrivers(): Promise<Driver[]>;\n  updateDriverLocation(id: string, latitude: string, longitude: string): Promise<Driver | undefined>;\n  approveDriver(id: string): Promise<Driver | undefined>;\n\n  // Passenger methods\n  getPassenger(id: string): Promise<Passenger | undefined>;\n  getPassengerByPhone(phone: string): Promise<Passenger | undefined>;\n  createPassenger(passenger: InsertPassenger): Promise<Passenger>;\n\n  // Ride methods\n  getRide(id: string): Promise<Ride | undefined>;\n  createRide(ride: InsertRide): Promise<Ride>;\n  updateRideStatus(id: string, status: string, driverId?: string): Promise<Ride | undefined>;\n  updateRidePaymentMethod(id: string, paymentMethod: string): Promise<Ride | undefined>;\n  getPendingRides(): Promise<Ride[]>;\n  getActiveRidesByDriver(driverId: string): Promise<Ride[]>;\n  getRidesByDriver(driverId: string): Promise<Ride[]>;\n  getRidesByPassenger(passengerId: string): Promise<Ride[]>;\n  getAllRides(): Promise<Ride[]>;\n\n  // Route price methods\n  getAllRoutePrices(): Promise<RoutePrice[]>;\n  getRoutePriceByRoute(route: string): Promise<RoutePrice | undefined>;\n  createRoutePrice(routePrice: InsertRoutePrice): Promise<RoutePrice>;\n  bulkCreateRoutePrices(routePrices: InsertRoutePrice[]): Promise<RoutePrice[]>;\n\n  // Driver earnings\n  getDriverEarnings(driverId: string): Promise<{\n    completedRides: number;\n    totalEarnings: number;\n    platformFee: number;\n    netEarnings: number;\n    pixKey: string | null;\n  }>;\n\n  // Payment methods\n  getDriverPayments(driverId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Driver methods\n  async getDriver(id: string): Promise<Driver | undefined> {\n    const [driver] = await db.select().from(drivers).where(eq(drivers.id, id));\n    return driver || undefined;\n  }\n\n  async getDriverById(id: string): Promise<Driver | undefined> {\n    return this.getDriver(id);\n  }\n\n  async getDriverByPhone(phone: string): Promise<Driver | undefined> {\n    const [driver] = await db.select().from(drivers).where(eq(drivers.phone, phone));\n    return driver || undefined;\n  }\n\n  async getDriverByEmail(email: string): Promise<Driver | undefined> {\n    const [driver] = await db.select().from(drivers).where(eq(drivers.email, email));\n    return driver || undefined;\n  }\n\n  async getAllDrivers(): Promise<Driver[]> {\n    return await db.select().from(drivers);\n  }\n\n  async createDriver(insertDriver: InsertDriver): Promise<Driver> {\n    const [driver] = await db\n      .insert(drivers)\n      .values(insertDriver)\n      .returning();\n    return driver;\n  }\n\n  async updateDriverStatus(id: string, isOnline: number): Promise<Driver | undefined> {\n    const [driver] = await db\n      .update(drivers)\n      .set({ isOnline })\n      .where(eq(drivers.id, id))\n      .returning();\n    return driver || undefined;\n  }\n\n  async getOnlineDrivers(): Promise<Driver[]> {\n    return await db.select().from(drivers).where(eq(drivers.isOnline, 1));\n  }\n\n  async updateDriverLocation(id: string, latitude: string, longitude: string): Promise<Driver | undefined> {\n    const [driver] = await db\n      .update(drivers)\n      .set({ latitude, longitude })\n      .where(eq(drivers.id, id))\n      .returning();\n    return driver || undefined;\n  }\n\n  async approveDriver(id: string): Promise<Driver | undefined> {\n    const [driver] = await db\n      .update(drivers)\n      .set({ isApproved: 1 })\n      .where(eq(drivers.id, id))\n      .returning();\n    return driver || undefined;\n  }\n\n  // Passenger methods\n  async getPassenger(id: string): Promise<Passenger | undefined> {\n    const [passenger] = await db.select().from(passengers).where(eq(passengers.id, id));\n    return passenger || undefined;\n  }\n\n  async getPassengerByPhone(phone: string): Promise<Passenger | undefined> {\n    const [passenger] = await db.select().from(passengers).where(eq(passengers.phone, phone));\n    return passenger || undefined;\n  }\n\n  async createPassenger(insertPassenger: InsertPassenger): Promise<Passenger> {\n    const [passenger] = await db\n      .insert(passengers)\n      .values(insertPassenger)\n      .returning();\n    return passenger;\n  }\n\n  // Ride methods\n  async getRide(id: string): Promise<Ride | undefined> {\n    const [ride] = await db.select().from(rides).where(eq(rides.id, id));\n    return ride || undefined;\n  }\n\n  async createRide(insertRide: InsertRide): Promise<Ride> {\n    const [ride] = await db\n      .insert(rides)\n      .values(insertRide)\n      .returning();\n    return ride;\n  }\n\n  async updateRideStatus(id: string, status: string, driverId?: string): Promise<Ride | undefined> {\n    const updateData: any = { status };\n    \n    if (driverId) {\n      updateData.driverId = driverId;\n    }\n    \n    if (status === 'accepted') {\n      updateData.acceptedAt = new Date();\n    } else if (status === 'completed') {\n      updateData.completedAt = new Date();\n    }\n\n    const [ride] = await db\n      .update(rides)\n      .set(updateData)\n      .where(eq(rides.id, id))\n      .returning();\n    return ride || undefined;\n  }\n\n  async updateRidePaymentMethod(id: string, paymentMethod: string): Promise<Ride | undefined> {\n    const [ride] = await db\n      .update(rides)\n      .set({ paymentMethod })\n      .where(eq(rides.id, id))\n      .returning();\n    return ride || undefined;\n  }\n\n  async getPendingRides(): Promise<Ride[]> {\n    return await db.select().from(rides).where(eq(rides.status, 'pending'));\n  }\n\n  async getActiveRidesByDriver(driverId: string): Promise<Ride[]> {\n    const allRides = await db.select().from(rides).where(eq(rides.driverId, driverId));\n    return allRides.filter(ride => ride.status === 'accepted' || ride.status === 'in_progress');\n  }\n\n  async getRidesByDriver(driverId: string): Promise<Ride[]> {\n    return await db.select().from(rides).where(eq(rides.driverId, driverId));\n  }\n\n  async getRidesByPassenger(passengerId: string): Promise<Ride[]> {\n    return await db.select().from(rides).where(eq(rides.passengerId, passengerId));\n  }\n\n  async getAllRides(): Promise<Ride[]> {\n    return await db.select().from(rides);\n  }\n\n  // Route price methods\n  async getAllRoutePrices(): Promise<RoutePrice[]> {\n    return await db.select().from(routePrices);\n  }\n\n  async getRoutePriceByRoute(route: string): Promise<RoutePrice | undefined> {\n    const [routePrice] = await db.select().from(routePrices).where(eq(routePrices.route, route));\n    return routePrice || undefined;\n  }\n\n  async createRoutePrice(insertRoutePrice: InsertRoutePrice): Promise<RoutePrice> {\n    const [routePrice] = await db\n      .insert(routePrices)\n      .values(insertRoutePrice)\n      .returning();\n    return routePrice;\n  }\n\n  async bulkCreateRoutePrices(insertRoutePrices: InsertRoutePrice[]): Promise<RoutePrice[]> {\n    const createdPrices = await db\n      .insert(routePrices)\n      .values(insertRoutePrices)\n      .returning();\n    return createdPrices;\n  }\n\n  async getDriverEarnings(driverId: string): Promise<{\n    completedRides: number;\n    totalEarnings: number;\n    platformFee: number;\n    netEarnings: number;\n    pixKey: string | null;\n  }> {\n    const driver = await this.getDriver(driverId);\n    const allRides = await db\n      .select()\n      .from(rides)\n      .where(eq(rides.driverId, driverId));\n    \n    const completed = allRides.filter(ride => ride.status === 'completed');\n    const completedCount = completed.length;\n    \n    const totalEarnings = completed.reduce((sum, ride) => {\n      const priceStr = ride.estimatedPrice?.replace('R$', '').replace(/\\s/g, '').replace(',', '.').trim() || '0';\n      const price = parseFloat(priceStr);\n      return sum + (isNaN(price) ? 0 : price);\n    }, 0);\n    \n    const platformFee = completedCount * 1.00;\n    const netEarnings = totalEarnings - platformFee;\n    \n    return {\n      completedRides: completedCount,\n      totalEarnings: Math.round(totalEarnings * 100) / 100,\n      platformFee: Math.round(platformFee * 100) / 100,\n      netEarnings: Math.round(netEarnings * 100) / 100,\n      pixKey: driver?.pixKey || null,\n    };\n  }\n\n  async getDriverPayments(driverId: string): Promise<Payment[]> {\n    return await db\n      .select()\n      .from(payments)\n      .where(eq(payments.driverId, driverId))\n      .orderBy(desc(payments.paidAt));\n  }\n\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const [payment] = await db\n      .insert(payments)\n      .values(insertPayment)\n      .returning();\n    return payment;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9342},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, serial, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const drivers = pgTable(\"drivers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  vehicleModel: text(\"vehicle_model\").notNull(),\n  vehiclePlate: text(\"vehicle_plate\").notNull(),\n  pixKey: text(\"pix_key\"),\n  termsAccepted: integer(\"terms_accepted\"), // 1 = accepted\n  isOnline: integer(\"is_online\").default(0).notNull(), // 0 = offline, 1 = online\n  isApproved: integer(\"is_approved\").default(0).notNull(), // 0 = pending, 1 = approved\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const passengers = pgTable(\"passengers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const rides = pgTable(\"rides\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  passengerId: varchar(\"passenger_id\").notNull(),\n  driverId: varchar(\"driver_id\"),\n  origin: text(\"origin\").notNull(),\n  destination: text(\"destination\").notNull(),\n  passengerCount: integer(\"passenger_count\").notNull(),\n  status: text(\"status\").notNull(), // pending, accepted, in_progress, completed, cancelled\n  estimatedPrice: text(\"estimated_price\"),\n  paymentMethod: text(\"payment_method\"), // 'pix' or 'cash'\n  platformFeeStatus: text(\"platform_fee_status\").default(\"pending\"), // 'pending' or 'paid'\n  requestedAt: timestamp(\"requested_at\").defaultNow().notNull(),\n  acceptedAt: timestamp(\"accepted_at\"),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const routePrices = pgTable(\"route_prices\", {\n  id: serial(\"id\").primaryKey(),\n  route: text(\"route\").notNull().unique(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  driverId: varchar(\"driver_id\").notNull(),\n  rideId: varchar(\"ride_id\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  pixKey: text(\"pix_key\").notNull(),\n  notes: text(\"notes\"),\n  paidAt: timestamp(\"paid_at\").defaultNow().notNull(),\n});\n\nexport const insertDriverSchema = createInsertSchema(drivers).omit({\n  id: true,\n  createdAt: true,\n  isApproved: true,\n});\n\nexport const driverLoginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter no mínimo 6 caracteres\"),\n});\n\nexport const insertPassengerSchema = createInsertSchema(passengers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRideSchema = createInsertSchema(rides).omit({\n  id: true,\n  requestedAt: true,\n  acceptedAt: true,\n  completedAt: true,\n});\n\nexport const insertRoutePriceSchema = createInsertSchema(routePrices).omit({\n  id: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  paidAt: true,\n});\n\nexport type Driver = typeof drivers.$inferSelect;\nexport type Passenger = typeof passengers.$inferSelect;\nexport type Ride = typeof rides.$inferSelect;\nexport type RoutePrice = typeof routePrices.$inferSelect;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertDriver = z.infer<typeof insertDriverSchema>;\nexport type InsertPassenger = z.infer<typeof insertPassengerSchema>;\nexport type InsertRide = z.infer<typeof insertRideSchema>;\nexport type InsertRoutePrice = z.infer<typeof insertRoutePriceSchema>;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type DriverLogin = z.infer<typeof driverLoginSchema>;\n","size_bytes":3938},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport DriverRegister from \"@/pages/driver-register\";\nimport DriverLogin from \"@/pages/driver-login\";\nimport DriverPanelPage from \"@/pages/driver-panel-page\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDrivers from \"@/pages/admin-drivers\";\nimport AdminPayments from \"@/pages/admin-payments\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/cadastro-motorista\" component={DriverRegister} />\n      <Route path=\"/motorista/login\" component={DriverLogin} />\n      <Route path=\"/motorista/painel\" component={DriverPanelPage} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/motoristas\" component={AdminDrivers} />\n      <Route path=\"/admin/pagamentos\" component={AdminPayments} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1401},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --primary: hsl(173, 80%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(24, 95%, 53%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 13%, 45%);\n  --accent: hsl(210, 40%, 94%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(173, 80%, 40%);\n  --chart-1: hsl(173, 80%, 40%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 4.9%);\n  --sidebar-primary: hsl(173, 80%, 40%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 94%);\n  --sidebar-accent-foreground: hsl(173, 80%, 40%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(173, 80%, 40%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(173, 80%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(24, 95%, 53%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(173, 80%, 40%);\n  --sidebar: hsl(222, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(173, 80%, 40%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(173, 80%, 40%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(173, 80%, 40%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.status-pending {\n  background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);\n}\n\n.status-accepted {\n  background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n}\n\n.status-in-progress {\n  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);\n}\n\n.status-completed {\n  background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);\n}\n\n.map-container {\n  background: linear-gradient(135deg, #f0fdfa 0%, #e6fffa 100%);\n  border: 2px dashed var(--primary);\n}\n\n.ride-card {\n  transition: all 0.3s ease;\n}\n\n.ride-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n}\n","size_bytes":3285},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('Service Worker registrado com sucesso:', registration);\n      })\n      .catch((error) => {\n        console.log('Falha ao registrar Service Worker:', error);\n      });\n  });\n}\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":511},"client/src/components/driver-panel.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { UserCircle, List, RefreshCw, Car, Users, Clock, DollarSign, Circle, MapPin, Bell, BellOff, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport PixPaymentModal from \"./pix-payment-modal\";\n\nexport default function DriverPanel() {\n  const { toast } = useToast();\n  const [driverStatus, setDriverStatus] = useState(\"online\");\n  const [notificationsEnabled, setNotificationsEnabled] = useState(false);\n  const previousRideIdsRef = useRef<Set<string>>(new Set());\n  const isInitializedRef = useRef(false);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const [pixModalOpen, setPixModalOpen] = useState(false);\n  const [completedRideForPayment, setCompletedRideForPayment] = useState<any>(null);\n  const [acceptingRideIds, setAcceptingRideIds] = useState<Set<string>>(new Set());\n  const [decliningRideIds, setDecliningRideIds] = useState<Set<string>>(new Set());\n  const [selectedDriverId, setSelectedDriverId] = useState<string | null>(() => {\n    // Load from localStorage or use first driver (with SSR safety check)\n    if (typeof window !== \"undefined\") {\n      return localStorage.getItem(\"selectedDriverId\") || null;\n    }\n    return null;\n  });\n\n  const { data: allDrivers } = useQuery({\n    queryKey: [\"/api/drivers/all\"],\n  });\n\n  // Find the selected driver or use the first available\n  const currentDriver = Array.isArray(allDrivers) && allDrivers.length > 0 \n    ? allDrivers.find((d: any) => d.id === selectedDriverId) || allDrivers[0]\n    : null;\n  const driverId = currentDriver?.id;\n\n  // Save selected driver to localStorage and update selection when drivers load\n  useEffect(() => {\n    if (currentDriver?.id) {\n      setSelectedDriverId(currentDriver.id);\n      if (typeof window !== \"undefined\") {\n        localStorage.setItem(\"selectedDriverId\", currentDriver.id);\n      }\n    }\n  }, [currentDriver?.id]);\n\n  const { data: pendingRides, isLoading: ridesLoading } = useQuery({\n    queryKey: [\"/api/rides/pending\"],\n    refetchInterval: 3000, // Poll every 3 seconds\n  });\n\n  const { data: activeRides, isLoading: activeRidesLoading } = useQuery({\n    queryKey: [\"/api/driver/rides/active\", driverId],\n    queryFn: async () => {\n      const response = await fetch(`/api/driver/rides/active?driverId=${driverId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch active rides\");\n      return response.json();\n    },\n    enabled: !!driverId,\n    refetchInterval: 5000,\n  });\n\n  const { data: drivers } = useQuery({\n    queryKey: [\"/api/drivers\"],\n  });\n\n  const { data: allRides } = useQuery({\n    queryKey: [\"/api/rides\"],\n    refetchInterval: 5000,\n  });\n\n  const driverRides = Array.isArray(allRides) && driverId \n    ? allRides.filter((ride: any) => ride.driverId === driverId && (ride.status === 'completed' || ride.status === 'cancelled'))\n    : [];\n\n  // Update driver status based on current driver\n  useEffect(() => {\n    if (currentDriver) {\n      setDriverStatus(currentDriver.isOnline === 1 ? \"online\" : \"offline\");\n    }\n  }, [currentDriver]);\n\n  const acceptRideMutation = useMutation({\n    mutationFn: async ({ rideId, driverId }: { rideId: string; driverId: string }) => {\n      console.log(\"🚀 Tentando aceitar corrida:\", { rideId, driverId });\n      setAcceptingRideIds(prev => new Set(prev).add(rideId));\n      \n      const response = await apiRequest(\"PATCH\", `/api/rides/${rideId}/status`, {\n        status: \"accepted\",\n        driverId,\n      });\n      \n      console.log(\"📡 Resposta da API:\", response);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"❌ Erro HTTP:\", response.status, errorText);\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n      \n      const data = await response.json();\n      console.log(\"✅ Corrida aceita com sucesso:\", data);\n      return data;\n    },\n    onSuccess: (data) => {\n      console.log(\"✅ onSuccess chamado:\", data);\n      toast({\n        title: \"Corrida aceita!\",\n        description: \"O passageiro será notificado.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/driver/rides/active\", driverId] });\n    },\n    onError: (error: any) => {\n      console.error(\"❌ Erro ao aceitar corrida:\", error);\n      toast({\n        title: \"Erro ao aceitar corrida\",\n        description: error.message || \"Falha ao aceitar corrida.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: (_data, _error, variables) => {\n      console.log(\"⚙️ onSettled chamado\");\n      setAcceptingRideIds(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(variables.rideId);\n        return newSet;\n      });\n    },\n  });\n\n  const declineRideMutation = useMutation({\n    mutationFn: async (rideId: string) => {\n      setDecliningRideIds(prev => new Set(prev).add(rideId));\n      // For now, we'll just remove it from pending (in a real app, we'd track declined rides)\n      return Promise.resolve();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Corrida recusada\",\n        description: \"A corrida foi enviada para outro motorista.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides/pending\"] });\n    },\n    onSettled: (_data, _error, variables) => {\n      setDecliningRideIds(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(variables);\n        return newSet;\n      });\n    },\n  });\n\n  const toggleStatusMutation = useMutation({\n    mutationFn: async (isOnline: boolean) => {\n      const response = await apiRequest(\"PATCH\", `/api/drivers/${driverId}/status`, {\n        isOnline: isOnline ? 1 : 0,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const newStatus = data.isOnline ? \"online\" : \"offline\";\n      setDriverStatus(newStatus);\n      toast({\n        title: newStatus === \"online\" ? \"Online\" : \"Offline\",\n        description: `Agora você está ${newStatus === \"online\" ? \"disponível\" : \"indisponível\"} para corridas.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/drivers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/drivers/all\"] });\n    },\n  });\n\n  const completeRideMutation = useMutation({\n    mutationFn: async (rideId: string) => {\n      console.log(\"🚀 Tentando finalizar corrida:\", rideId);\n      const response = await apiRequest(\"PATCH\", `/api/rides/${rideId}/status`, {\n        status: \"completed\",\n      });\n      const data = await response.json();\n      console.log(\"✅ Corrida finalizada com sucesso:\", data);\n      return data;\n    },\n    onSuccess: (ride) => {\n      console.log(\"✅ onSuccess - corrida finalizada:\", ride);\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/driver/rides/active\", driverId] });\n      \n      setCompletedRideForPayment(ride);\n      setPixModalOpen(true);\n    },\n    onError: (error: any) => {\n      console.error(\"❌ Erro ao finalizar corrida:\", error);\n      toast({\n        title: \"Erro\",\n        description: `Falha ao finalizar corrida: ${error.message || \"Erro desconhecido\"}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAcceptRide = (rideId: string) => {\n    if (!driverId) return;\n    acceptRideMutation.mutate({ rideId, driverId });\n  };\n\n  const handleDeclineRide = (rideId: string) => {\n    declineRideMutation.mutate(rideId);\n  };\n\n  const handleToggleStatus = () => {\n    if (!driverId) return;\n    const newStatus = driverStatus === \"online\" ? false : true;\n    toggleStatusMutation.mutate(newStatus);\n  };\n\n  const handleRefreshRides = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/rides/pending\"] });\n  };\n\n  const handleCompleteRide = (rideId: string) => {\n    completeRideMutation.mutate(rideId);\n  };\n\n  // Request notification permission\n  const requestNotificationPermission = async () => {\n    if (!(\"Notification\" in window)) {\n      toast({\n        title: \"Notificações não suportadas\",\n        description: \"Seu navegador não suporta notificações.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Initialize AudioContext on user interaction to avoid autoplay restrictions\n    initAudioContext();\n\n    const permission = await Notification.requestPermission();\n    if (permission === \"granted\") {\n      setNotificationsEnabled(true);\n      toast({\n        title: \"Notificações ativadas!\",\n        description: \"Você receberá alertas de novas corridas.\",\n      });\n    } else {\n      toast({\n        title: \"Notificações bloqueadas\",\n        description: \"Ative as notificações nas configurações do navegador.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Initialize AudioContext on user interaction\n  const initAudioContext = () => {\n    if (!audioContextRef.current) {\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n    }\n    if (audioContextRef.current.state === 'suspended') {\n      audioContextRef.current.resume();\n    }\n  };\n\n  // Play notification sound - Som de notificação mais forte e audível\n  const playNotificationSound = () => {\n    try {\n      initAudioContext();\n      const audioContext = audioContextRef.current;\n      if (!audioContext) return;\n\n      // Tocar 3 beeps para chamar atenção\n      [0, 0.3, 0.6].forEach((delay) => {\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        \n        // Frequência mais alta e audível\n        oscillator.frequency.value = 1200;\n        oscillator.type = \"square\";\n        \n        // Volume mais alto\n        gainNode.gain.setValueAtTime(0.5, audioContext.currentTime + delay);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + delay + 0.2);\n        \n        oscillator.start(audioContext.currentTime + delay);\n        oscillator.stop(audioContext.currentTime + delay + 0.2);\n      });\n    } catch (error) {\n      console.error(\"Error playing notification sound:\", error);\n    }\n  };\n\n  // Detect new rides and notify\n  useEffect(() => {\n    console.log(\"🔍 useEffect triggered - pendingRides:\", pendingRides);\n    \n    if (!Array.isArray(pendingRides)) {\n      console.log(\"⚠️ pendingRides não é array\");\n      return;\n    }\n    \n    if (pendingRides.length === 0) {\n      console.log(\"⚠️ pendingRides está vazio\");\n      return;\n    }\n    \n    // Build current set of ride IDs\n    const currentRideIds = new Set(pendingRides.map((ride: any) => ride.id));\n    console.log(\"📋 IDs atuais:\", Array.from(currentRideIds));\n    \n    // After initialization, detect new rides by comparing IDs\n    if (isInitializedRef.current) {\n      console.log(\"📋 IDs anteriores:\", Array.from(previousRideIdsRef.current));\n      \n      // Find new rides that weren't in the previous set\n      const newRides = pendingRides.filter(\n        (ride: any) => !previousRideIdsRef.current.has(ride.id)\n      );\n      \n      console.log(`🔔 Novas corridas detectadas: ${newRides.length}`, newRides.map(r => r.id));\n      \n      // Notify for each new ride (only truly new ones)\n      if (newRides.length > 0) {\n        newRides.forEach((newRide: any) => {\n          console.log(\"🚨 NOTIFICANDO CORRIDA:\", newRide);\n          \n          // Play sound\n          playNotificationSound();\n          \n          // Show browser notification if enabled\n          if (notificationsEnabled && Notification.permission === \"granted\") {\n            new Notification(\"🚗 Nova Corrida Disponível!\", {\n              body: `De: ${newRide.origin}\\nPara: ${newRide.destination}\\nPreço: ${newRide.estimatedPrice || \"R$ 18,00\"}`,\n              icon: \"/favicon.ico\",\n              tag: `ride-${newRide.id}`,\n              requireInteraction: true,\n            });\n          }\n          \n          // Show toast notification\n          toast({\n            title: \"🚗 Nova Corrida!\",\n            description: `${newRide.origin} → ${newRide.destination}`,\n            duration: 5000,\n          });\n        });\n      }\n    } else {\n      // First load - initialize the set and show info toast if there are pending rides\n      console.log(`📱 Inicializado com ${pendingRides.length} corrida(s) pendente(s)`);\n      isInitializedRef.current = true;\n      \n      // If there are already pending rides when driver opens the app, show a toast\n      if (pendingRides.length > 0) {\n        toast({\n          title: `📋 ${pendingRides.length} corrida(s) aguardando`,\n          description: \"Confira as corridas pendentes abaixo\",\n          duration: 6000,\n        });\n      }\n    }\n    \n    // Update the previous rides set\n    previousRideIdsRef.current = currentRideIds;\n    console.log(\"✅ previousRideIdsRef atualizado:\", Array.from(currentRideIds));\n  }, [pendingRides, notificationsEnabled, toast]);\n\n  const getStatusColor = (status: string) => {\n    switch(status) {\n      case 'completed': return 'bg-green-500';\n      case 'cancelled': return 'bg-red-500';\n      case 'in_progress': return 'bg-blue-500';\n      case 'accepted': return 'bg-yellow-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch(status) {\n      case 'completed': return 'Concluída';\n      case 'cancelled': return 'Cancelada';\n      case 'in_progress': return 'Em andamento';\n      case 'accepted': return 'Aceita';\n      case 'pending': return 'Pendente';\n      default: return status;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Driver Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <UserCircle className=\"text-primary mr-3\" />\n              Status do Motorista\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n          {Array.isArray(allDrivers) && allDrivers.length > 1 && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm text-muted-foreground\">Selecionar Motorista:</label>\n              <Select \n                value={selectedDriverId || \"\"} \n                onValueChange={(value) => {\n                  setSelectedDriverId(value);\n                  if (typeof window !== \"undefined\") {\n                    localStorage.setItem(\"selectedDriverId\", value);\n                  }\n                }}\n              >\n                <SelectTrigger data-testid=\"select-driver\">\n                  <SelectValue placeholder=\"Escolha um motorista\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {allDrivers.map((driver: any) => (\n                    <SelectItem key={driver.id} value={driver.id} data-testid={`item-driver-${driver.id}`}>\n                      {driver.name} - {driver.vehiclePlate}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          {currentDriver && (\n            <div className=\"p-3 bg-muted rounded-lg\">\n              <p data-testid=\"text-current-driver-name\" className=\"font-medium\">{currentDriver.name}</p>\n              <p className=\"text-sm text-muted-foreground\">{currentDriver.vehicleModel} - {currentDriver.vehiclePlate}</p>\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Status:</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-3 h-3 rounded-full ${\n                driverStatus === \"online\" ? \"bg-green-500\" : \"bg-gray-500\"\n              }`}></div>\n              <span data-testid=\"text-driver-status\" className={`font-medium ${\n                driverStatus === \"online\" ? \"text-green-600\" : \"text-gray-600\"\n              }`}>\n                {driverStatus === \"online\" ? \"Online\" : \"Offline\"}\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Corridas hoje:</span>\n            <span data-testid=\"text-rides-today\" className=\"font-medium\">8</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Ganhos:</span>\n            <span data-testid=\"text-earnings\" className=\"font-medium text-primary\">R$ 240,00</span>\n          </div>\n          \n          <Button\n            data-testid=\"button-toggle-status\"\n            onClick={handleToggleStatus}\n            disabled={toggleStatusMutation.isPending}\n            className={`w-full py-3 transition-colors ${\n              driverStatus === \"online\"\n                ? \"bg-destructive hover:bg-destructive/90 text-destructive-foreground\"\n                : \"bg-primary hover:bg-primary/90 text-primary-foreground\"\n            }`}\n          >\n            {driverStatus === \"online\" ? \"Ficar Offline\" : \"Ficar Online\"}\n          </Button>\n\n          <Button\n            data-testid=\"button-toggle-notifications\"\n            onClick={requestNotificationPermission}\n            disabled={notificationsEnabled}\n            variant={notificationsEnabled ? \"outline\" : \"secondary\"}\n            className=\"w-full py-3\"\n          >\n            {notificationsEnabled ? (\n              <>\n                <Bell className=\"w-4 h-4 mr-2\" />\n                Notificações Ativadas\n              </>\n            ) : (\n              <>\n                <BellOff className=\"w-4 h-4 mr-2\" />\n                Ativar Notificações\n              </>\n            )}\n          </Button>\n          </CardContent>\n        </Card>\n\n        {/* Available Rides */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <List className=\"text-secondary mr-3\" />\n                Corridas Disponíveis\n              </CardTitle>\n              <Button\n                data-testid=\"button-refresh-rides\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleRefreshRides}\n                className=\"text-primary hover:text-primary/80\"\n              >\n                <RefreshCw className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {ridesLoading ? (\n              <div data-testid=\"loading-rides\" className=\"text-center py-8\">\n                <RefreshCw className=\"w-8 h-8 animate-spin mx-auto mb-4 text-primary\" />\n                <p className=\"text-muted-foreground\">Carregando corridas...</p>\n              </div>\n            ) : Array.isArray(pendingRides) && pendingRides.length > 0 ? (\n              <div className=\"space-y-4\">\n                {Array.isArray(pendingRides) && pendingRides.map((ride: any) => (\n                  <div key={ride.id} className=\"ride-card p-4 border border-border rounded-lg\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <span className=\"status-pending text-white text-xs px-2 py-1 rounded-full font-medium\">\n                            NOVA\n                          </span>\n                          <span data-testid={`text-ride-id-${ride.id}`} className=\"text-sm text-muted-foreground\">\n                            #{ride.id.slice(0, 8)}\n                          </span>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Circle className=\"text-primary text-xs w-3 h-3\" />\n                            <span data-testid={`text-origin-${ride.id}`} className=\"text-sm\">{ride.origin}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <MapPin className=\"text-secondary text-xs w-3 h-3\" />\n                            <span data-testid={`text-destination-${ride.id}`} className=\"text-sm\">{ride.destination}</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-muted-foreground\">Distância</p>\n                        <p data-testid={`text-distance-${ride.id}`} className=\"font-semibold text-primary\">2.3 km</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span data-testid={`text-passengers-${ride.id}`}>\n                          <Users className=\"inline w-3 h-3 mr-1\" />\n                          {ride.passengerCount} passageiro{ride.passengerCount > 1 ? 's' : ''}\n                        </span>\n                        <span>\n                          <Clock className=\"inline w-3 h-3 mr-1\" />\n                          5 min\n                        </span>\n                        <span data-testid={`text-price-${ride.id}`}>\n                          <DollarSign className=\"inline w-3 h-3 mr-1\" />\n                          {ride.estimatedPrice || \"R$ 18,00\"}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex space-x-2\">\n                        <Button\n                          data-testid={`button-decline-${ride.id}`}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeclineRide(ride.id)}\n                          disabled={decliningRideIds.has(ride.id)}\n                        >\n                          Recusar\n                        </Button>\n                        <Button\n                          data-testid={`button-accept-${ride.id}`}\n                          size=\"sm\"\n                          onClick={() => handleAcceptRide(ride.id)}\n                          disabled={acceptingRideIds.has(ride.id)}\n                          className=\"bg-primary hover:bg-primary/90 text-primary-foreground\"\n                        >\n                          Aceitar\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Car className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p data-testid=\"text-no-rides\" className=\"text-muted-foreground\">\n                  Nenhuma corrida disponível no momento\n                </p>\n              </div>\n            )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Active Rides - In Progress */}\n      {Array.isArray(activeRides) && activeRides.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Car className=\"text-green-500 mr-3\" />\n              Corridas em Andamento\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {activeRides.map((ride: any) => (\n                <div key={ride.id} className=\"p-4 border-2 border-green-500 rounded-lg bg-green-50 dark:bg-green-950\" data-testid={`active-ride-${ride.id}`}>\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <span className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full font-medium\">\n                          EM ANDAMENTO\n                        </span>\n                        <span data-testid={`text-active-ride-id-${ride.id}`} className=\"text-sm text-muted-foreground\">\n                          #{ride.id.slice(0, 8)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Circle className=\"text-primary text-xs w-3 h-3\" />\n                          <span data-testid={`text-active-origin-${ride.id}`} className=\"text-sm font-medium\">{ride.origin}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <MapPin className=\"text-secondary text-xs w-3 h-3\" />\n                          <span data-testid={`text-active-destination-${ride.id}`} className=\"text-sm font-medium\">{ride.destination}</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"text-lg font-bold text-green-600 dark:text-green-400\" data-testid={`text-active-price-${ride.id}`}>\n                        {ride.estimatedPrice || \"R$ 18,00\"}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        <Users className=\"inline w-3 h-3 mr-1\" />\n                        {ride.passengerCount} passageiro{ride.passengerCount > 1 ? 's' : ''}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <Button\n                    data-testid={`button-complete-ride-${ride.id}`}\n                    onClick={() => handleCompleteRide(ride.id)}\n                    disabled={completeRideMutation.isPending}\n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Finalizar Corrida e Liberar Pagamento\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Driver Ride History */}\n      {driverRides.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"text-primary mr-3\" />\n              Histórico de Corridas\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {driverRides.map((ride: any) => (\n                <div \n                  key={ride.id} \n                  data-testid={`driver-history-ride-${ride.id}`}\n                  className=\"p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors\"\n                >\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <div className={`w-2 h-2 rounded-full ${getStatusColor(ride.status)}`}></div>\n                        <span \n                          data-testid={`driver-history-status-${ride.id}`}\n                          className=\"text-xs font-medium\"\n                        >\n                          {getStatusText(ride.status)}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          #{ride.id.slice(0, 8)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <Circle className=\"text-primary w-3 h-3 flex-shrink-0\" />\n                          <span data-testid={`driver-history-origin-${ride.id}`}>{ride.origin}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <MapPin className=\"text-secondary w-3 h-3 flex-shrink-0\" />\n                          <span data-testid={`driver-history-destination-${ride.id}`}>{ride.destination}</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-semibold text-primary\">\n                        {ride.estimatedPrice || \"R$ 18,00\"}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {ride.completedAt \n                          ? new Date(ride.completedAt).toLocaleDateString('pt-BR', { day: '2-digit', month: 'short' })\n                          : new Date(ride.requestedAt).toLocaleDateString('pt-BR', { day: '2-digit', month: 'short' })\n                        }\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span>\n                        <Users className=\"inline w-3 h-3 mr-1\" />\n                        {ride.passengerCount}\n                      </span>\n                      <span>\n                        <Clock className=\"inline w-3 h-3 mr-1\" />\n                        {new Date(ride.requestedAt).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}\n                      </span>\n                    </div>\n                    <span className=\"text-primary font-medium\">\n                      Concluída\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Pix Payment Modal */}\n      {completedRideForPayment && (\n        <PixPaymentModal\n          open={pixModalOpen}\n          onClose={() => {\n            setPixModalOpen(false);\n            setCompletedRideForPayment(null);\n          }}\n          rideDetails={{\n            id: completedRideForPayment.id,\n            origin: completedRideForPayment.origin,\n            destination: completedRideForPayment.destination,\n            price: completedRideForPayment.estimatedPrice || \"R$ 18,00\",\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":31230},"client/src/components/footer.tsx":{"content":"import { Car, UserPlus } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-muted border-t border-border mt-16\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <Car className=\"text-white w-5 h-5\" />\n              </div>\n              <span className=\"text-lg font-bold text-primary\">tecnok</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Transporte comunitário seguro e acessível para Furnas, Agrícola e Mata Machado.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Regiões Atendidas</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li data-testid=\"text-region-furnas\">Furnas</li>\n              <li data-testid=\"text-region-agricola\">Agrícola</li>\n              <li data-testid=\"text-region-mata-machado\">Mata Machado</li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Contato</h4>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <p data-testid=\"text-contact-whatsapp\">WhatsApp: +55 21 98066-9989</p>\n              <p data-testid=\"text-contact-website\">Site: tecnok.com.br</p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-8 pt-6 flex flex-col items-center gap-4\">\n          <Link href=\"/cadastro-motorista\">\n            <button \n              className=\"flex items-center gap-2 px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-semibold shadow-lg\"\n              data-testid=\"link-driver-register\"\n            >\n              <UserPlus className=\"w-5 h-5\" />\n              Cadastrar como Motorista\n            </button>\n          </Link>\n          <p className=\"text-sm text-muted-foreground\">\n            &copy; 2024 tecnok. Todos os direitos reservados.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2358},"client/src/components/header.tsx":{"content":"import { Car } from \"lucide-react\";\n\ninterface HeaderProps {\n  activeTab: \"passenger\" | \"driver\" | \"map\";\n  onTabChange: (tab: \"passenger\" | \"driver\" | \"map\") => void;\n}\n\nexport default function Header({ activeTab, onTabChange }: HeaderProps) {\n  return (\n    <header className=\"bg-card border-b border-border\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center\">\n              <Car className=\"text-white text-xl\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-primary\">tecnok</h1>\n              <p className=\"text-sm text-muted-foreground\">Transporte Comunitário</p>\n            </div>\n          </div>\n          \n          <nav className=\"hidden md:flex space-x-6\">\n            <button\n              data-testid=\"tab-passenger\"\n              onClick={() => onTabChange(\"passenger\")}\n              className={`transition-colors pb-1 ${\n                activeTab === \"passenger\"\n                  ? \"text-primary border-b-2 border-primary font-medium\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              Passageiro\n            </button>\n            <button\n              data-testid=\"tab-driver\"\n              onClick={() => onTabChange(\"driver\")}\n              className={`transition-colors pb-1 ${\n                activeTab === \"driver\"\n                  ? \"text-primary border-b-2 border-primary font-medium\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              Motorista\n            </button>\n            <button\n              data-testid=\"tab-map\"\n              onClick={() => onTabChange(\"map\")}\n              className={`transition-colors pb-1 ${\n                activeTab === \"map\"\n                  ? \"text-primary border-b-2 border-primary font-medium\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              Mapa\n            </button>\n          </nav>\n\n          <a\n            href=\"https://wa.me/5521980669989?text=Fale%20com%20um%20agente%20Tecnok\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            data-testid=\"link-whatsapp\"\n            className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.886 3.75\"/>\n            </svg>\n            <span className=\"hidden sm:inline\">Contato</span>\n          </a>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3940},"client/src/components/map-panel.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Map as MapIcon } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\n// Fix Leaflet default icon issues with bundlers\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\nexport default function MapPanel() {\n  const mapRef = useRef<L.Map | null>(null);\n  const markersRef = useRef<{ [key: number]: L.Marker }>({});\n  const movementIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { data: rides } = useQuery({\n    queryKey: [\"/api/rides\"],\n    refetchInterval: 5000,\n  });\n\n  const { data: drivers } = useQuery({\n    queryKey: [\"/api/drivers\"],\n    refetchInterval: 3000,\n  });\n\n  const activeRides = Array.isArray(rides) ? rides.filter((ride: any) => \n    ride.status === 'accepted' || ride.status === 'in_progress'\n  ) : [];\n\n  const onlineDrivers = Array.isArray(drivers) ? drivers.filter((driver: any) => driver.isOnline === 1) : [];\n\n  // Initialize map\n  useEffect(() => {\n    if (mapRef.current) return; // Map already initialized\n\n    // Centraliza em Furnas/RJ\n    const centro: [number, number] = [-22.51, -43.71];\n\n    const map = L.map('leaflet-map').setView(centro, 13);\n\n    // OpenStreetMap layer\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(map);\n\n    mapRef.current = map;\n\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update driver markers\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    const map = mapRef.current;\n    const onlineDriverIds = new Set(onlineDrivers.map((d: any) => Number(d.id)));\n\n    // Remove markers that are no longer online (convert keys to numbers)\n    Object.keys(markersRef.current).forEach(key => {\n      const driverId = Number(key);\n      if (!onlineDriverIds.has(driverId)) {\n        markersRef.current[driverId].remove();\n        delete markersRef.current[driverId];\n      }\n    });\n\n    // Add or update driver markers\n    onlineDrivers.forEach((driver: any) => {\n      const driverId = Number(driver.id);\n      let marker = markersRef.current[driverId];\n      \n      // Default position if no lat/lng (near Furnas)\n      const lat = driver.latitude ? parseFloat(driver.latitude) : -22.51 + (Math.random() - 0.5) * 0.01;\n      const lng = driver.longitude ? parseFloat(driver.longitude) : -43.71 + (Math.random() - 0.5) * 0.01;\n\n      if (marker) {\n        // Update existing marker position\n        marker.setLatLng([lat, lng]);\n      } else {\n        // Create new marker\n        const redIcon = L.icon({\n          iconUrl: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png',\n          iconSize: [32, 32]\n        });\n\n        marker = L.marker([lat, lng], { icon: redIcon })\n          .addTo(map)\n          .bindPopup(`<b>${driver.name}</b><br>${driver.vehicleModel || 'Motorista'}`);\n        \n        markersRef.current[driverId] = marker;\n      }\n    });\n  }, [onlineDrivers]);\n\n  // Simulate movement for drivers without GPS (for demo)\n  useEffect(() => {\n    // Clear previous interval\n    if (movementIntervalRef.current) {\n      clearInterval(movementIntervalRef.current);\n    }\n\n    // Only animate if there are markers\n    if (Object.keys(markersRef.current).length > 0) {\n      movementIntervalRef.current = setInterval(() => {\n        Object.values(markersRef.current).forEach(marker => {\n          const pos = marker.getLatLng();\n          const novoLat = pos.lat + (Math.random() - 0.5) * 0.0005;\n          const novoLng = pos.lng + (Math.random() - 0.5) * 0.0005;\n          marker.setLatLng([novoLat, novoLng]);\n        });\n      }, 3000);\n    }\n\n    return () => {\n      if (movementIntervalRef.current) {\n        clearInterval(movementIntervalRef.current);\n        movementIntervalRef.current = null;\n      }\n    };\n  }, [onlineDrivers]); // Re-run when drivers change\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <MapIcon className=\"text-primary mr-3\" />\n          Mapa em Tempo Real - Motoristas Online\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div \n          id=\"leaflet-map\" \n          className=\"rounded-lg h-96 w-full\"\n          style={{ zIndex: 0 }}\n        />\n\n        {/* Map Legend */}\n        <div className=\"mt-6 flex flex-wrap gap-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-red-500 rounded-full\"></div>\n            <span className=\"text-sm text-muted-foreground\">\n              Motoristas Online ({onlineDrivers.length})\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-blue-500 rounded-full\"></div>\n            <span className=\"text-sm text-muted-foreground\">\n              Passageiros Aguardando\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n            <span className=\"text-sm text-muted-foreground\">\n              Corridas Ativas ({activeRides.length})\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5716},"client/src/components/passenger-panel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { MapPin, Circle, Users, Search, Clock, CheckCircle, Car, DollarSign, UserPlus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { RoutePrice } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\n\ninterface RideForm {\n  origin: string;\n  destination: string;\n  passengerCount: number;\n  passengerName: string;\n  passengerPhone: string;\n}\n\n// Helper to format price as Brazilian currency\nfunction formatBRL(price: string | number): string {\n  const numPrice = typeof price === 'string' ? parseFloat(price) : price;\n  return new Intl.NumberFormat('pt-BR', { \n    style: 'currency', \n    currency: 'BRL' \n  }).format(numPrice);\n}\n\nexport default function PassengerPanel() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [rideForm, setRideForm] = useState<RideForm>({\n    origin: \"\",\n    destination: \"\",\n    passengerCount: 1,\n    passengerName: \"\",\n    passengerPhone: \"\"\n  });\n\n  // Get current passenger phone from localStorage\n  const currentPassengerPhone = localStorage.getItem(\"passengerPhone\") || \"\";\n\n  // Fetch rides for current passenger only (secure server-side filtering)\n  const { data: rides, isLoading: ridesLoading } = useQuery({\n    queryKey: [\"/api/rides/by-phone\", currentPassengerPhone],\n    queryFn: async () => {\n      if (!currentPassengerPhone) return [];\n      const response = await apiRequest(\"POST\", \"/api/rides/by-phone\", { phone: currentPassengerPhone });\n      return response.json();\n    },\n    refetchInterval: 5000,\n    enabled: !!currentPassengerPhone,\n  });\n\n  const { data: routePrices } = useQuery<RoutePrice[]>({\n    queryKey: [\"/api/route-prices\"],\n  });\n\n  const createRideMutation = useMutation({\n    mutationFn: async (data: RideForm) => {\n      const response = await apiRequest(\"POST\", \"/api/rides\", data);\n      return response.json();\n    },\n    onSuccess: (newRide) => {\n      // Save passenger phone to localStorage\n      localStorage.setItem(\"passengerPhone\", rideForm.passengerPhone);\n      \n      toast({\n        title: \"Corrida solicitada!\",\n        description: \"Buscando motorista disponível...\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides/by-phone\"] });\n      setRideForm({\n        origin: \"\",\n        destination: \"\",\n        passengerCount: 1,\n        passengerName: \"\",\n        passengerPhone: \"\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao solicitar corrida. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!rideForm.origin || !rideForm.destination || !rideForm.passengerName || !rideForm.passengerPhone) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Preencha todos os campos para solicitar a corrida.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createRideMutation.mutate(rideForm);\n  };\n\n  const currentRide = Array.isArray(rides) ? rides.find((ride: any) => ride.status !== 'completed' && ride.status !== 'cancelled') : undefined;\n  const completedRides = Array.isArray(rides) ? rides.filter((ride: any) => ride.status === 'completed' || ride.status === 'cancelled') : [];\n\n  const getRideSteps = (status: string) => {\n    const steps = [\n      { label: \"Corrida solicitada\", completed: true },\n      { label: \"Buscando motorista\", completed: status !== 'pending' },\n      { label: \"Motorista a caminho\", completed: status === 'in_progress' || status === 'completed' },\n      { label: \"Em andamento\", completed: status === 'completed' }\n    ];\n    return steps;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch(status) {\n      case 'completed': return 'bg-green-500';\n      case 'cancelled': return 'bg-red-500';\n      case 'in_progress': return 'bg-blue-500';\n      case 'accepted': return 'bg-yellow-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch(status) {\n      case 'completed': return 'Concluída';\n      case 'cancelled': return 'Cancelada';\n      case 'in_progress': return 'Em andamento';\n      case 'accepted': return 'Aceita';\n      case 'pending': return 'Pendente';\n      default: return status;\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Ride Request Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MapPin className=\"text-primary mr-3\" />\n              Solicitar Corrida\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Nome</Label>\n              <Input\n                data-testid=\"input-passenger-name\"\n                type=\"text\"\n                value={rideForm.passengerName}\n                onChange={(e) => setRideForm(prev => ({ ...prev, passengerName: e.target.value }))}\n                placeholder=\"Seu nome completo\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Telefone</Label>\n              <Input\n                data-testid=\"input-passenger-phone\"\n                type=\"tel\"\n                value={rideForm.passengerPhone}\n                onChange={(e) => setRideForm(prev => ({ ...prev, passengerPhone: e.target.value }))}\n                placeholder=\"31 99999-9999\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Origem</Label>\n              <div className=\"relative\">\n                <Circle className=\"text-primary absolute left-3 top-1/2 transform -translate-y-1/2 text-sm w-4 h-4\" />\n                <Input\n                  data-testid=\"input-origin\"\n                  type=\"text\"\n                  value={rideForm.origin}\n                  onChange={(e) => setRideForm(prev => ({ ...prev, origin: e.target.value }))}\n                  className=\"pl-10\"\n                  placeholder=\"Digite o local de partida\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Destino</Label>\n              <div className=\"relative\">\n                <MapPin className=\"text-secondary absolute left-3 top-1/2 transform -translate-y-1/2 text-sm w-4 h-4\" />\n                <Input\n                  data-testid=\"input-destination\"\n                  type=\"text\"\n                  value={rideForm.destination}\n                  onChange={(e) => setRideForm(prev => ({ ...prev, destination: e.target.value }))}\n                  className=\"pl-10\"\n                  placeholder=\"Digite o destino\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Número de Passageiros</Label>\n              <Select \n                value={rideForm.passengerCount.toString()} \n                onValueChange={(value) => setRideForm(prev => ({ ...prev, passengerCount: parseInt(value) }))}\n              >\n                <SelectTrigger data-testid=\"select-passenger-count\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">1 passageiro</SelectItem>\n                  <SelectItem value=\"2\">2 passageiros</SelectItem>\n                  <SelectItem value=\"3\">3 passageiros</SelectItem>\n                  <SelectItem value=\"4\">4 passageiros</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button \n              type=\"submit\" \n              data-testid=\"button-request-ride\"\n              className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-semibold py-4\"\n              disabled={createRideMutation.isPending}\n            >\n              <Search className=\"mr-2 w-4 h-4\" />\n              {createRideMutation.isPending ? \"Solicitando...\" : \"Solicitar Corrida\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Tempo estimado:</span>\n              <span data-testid=\"text-estimated-time\" className=\"font-medium\">5-10 min</span>\n            </div>\n            <div className=\"flex items-center justify-between text-sm mt-2\">\n              <span className=\"text-muted-foreground\">Preço estimado:</span>\n              <span data-testid=\"text-estimated-price\" className=\"font-medium text-primary\">R$ 15,00 - R$ 25,00</span>\n            </div>\n          </div>\n\n          <div className=\"mt-6 pt-6 border-t border-border\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-3\">\n                Quer ganhar dinheiro dirigindo?\n              </p>\n              <Button\n                data-testid=\"button-become-driver\"\n                variant=\"outline\"\n                className=\"w-full border-secondary text-secondary hover:bg-secondary hover:text-secondary-foreground font-semibold\"\n                onClick={() => setLocation(\"/cadastro-motorista\")}\n              >\n                <UserPlus className=\"mr-2 w-4 h-4\" />\n                Torne-se Motorista Parceiro\n              </Button>\n            </div>\n          </div>\n          </CardContent>\n        </Card>\n\n        {/* Ride Status Panel */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"text-secondary mr-3\" />\n              Status da Corrida\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n          {currentRide ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-yellow-400 rounded-full animate-pulse\"></div>\n                  <span data-testid=\"text-ride-status\" className=\"font-medium\">\n                    {currentRide.status === 'pending' && 'Buscando motorista...'}\n                    {currentRide.status === 'accepted' && 'Motorista encontrado!'}\n                    {currentRide.status === 'in_progress' && 'Em andamento'}\n                    {currentRide.status === 'completed' && 'Concluída'}\n                  </span>\n                </div>\n                <span data-testid=\"text-ride-id\" className=\"text-sm text-muted-foreground\">#{currentRide.id.slice(0, 8)}</span>\n              </div>\n\n              <div className=\"space-y-3\">\n                {getRideSteps(currentRide.status).map((step, index) => (\n                  <div key={index} className=\"flex items-center space-x-4\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${\n                      step.completed \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted border-2 border-border opacity-50'\n                    }`}>\n                      {step.completed ? <CheckCircle className=\"w-4 h-4\" /> : index + 1}\n                    </div>\n                    <div>\n                      <p className={`font-medium ${step.completed ? '' : 'text-muted-foreground'}`}>\n                        {step.label}\n                      </p>\n                      {step.completed && (\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {currentRide.status === 'pending' && (\n                <Button\n                  data-testid=\"button-cancel-ride\"\n                  variant=\"outline\"\n                  className=\"w-full border-destructive text-destructive hover:bg-destructive hover:text-destructive-foreground mt-6\"\n                >\n                  Cancelar Corrida\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Clock className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p data-testid=\"text-no-active-ride\" className=\"text-muted-foreground\">\n                Nenhuma corrida ativa no momento\n              </p>\n            </div>\n          )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Route Prices */}\n      {routePrices && routePrices.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <DollarSign className=\"text-primary mr-3\" />\n              Tabela de Preços de Rotas\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n              {routePrices.map((routePrice) => (\n                <div \n                  key={routePrice.id} \n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:bg-muted/80 transition-colors\"\n                  data-testid={`route-price-${routePrice.id}`}\n                >\n                  <span className=\"text-sm font-medium text-foreground\">\n                    {routePrice.route}\n                  </span>\n                  <span className=\"text-sm font-bold text-primary\">\n                    {formatBRL(routePrice.price)}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Ride History */}\n      {completedRides.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"text-primary mr-3\" />\n              Histórico de Corridas\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {completedRides.map((ride: any) => (\n                <div \n                  key={ride.id} \n                  data-testid={`history-ride-${ride.id}`}\n                  className=\"p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors\"\n                >\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <div className={`w-2 h-2 rounded-full ${getStatusColor(ride.status)}`}></div>\n                        <span \n                          data-testid={`history-status-${ride.id}`}\n                          className=\"text-xs font-medium\"\n                        >\n                          {getStatusText(ride.status)}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          #{ride.id.slice(0, 8)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <Circle className=\"text-primary w-3 h-3 flex-shrink-0\" />\n                          <span data-testid={`history-origin-${ride.id}`}>{ride.origin}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 text-sm\">\n                          <MapPin className=\"text-secondary w-3 h-3 flex-shrink-0\" />\n                          <span data-testid={`history-destination-${ride.id}`}>{ride.destination}</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-semibold text-primary\">\n                        {ride.estimatedPrice || \"R$ 18,00\"}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {ride.completedAt \n                          ? new Date(ride.completedAt).toLocaleDateString('pt-BR', { day: '2-digit', month: 'short' })\n                          : new Date(ride.requestedAt).toLocaleDateString('pt-BR', { day: '2-digit', month: 'short' })\n                        }\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span>\n                        <Users className=\"inline w-3 h-3 mr-1\" />\n                        {ride.passengerCount}\n                      </span>\n                      {ride.driverId && (\n                        <span>\n                          <Car className=\"inline w-3 h-3 mr-1\" />\n                          Motorista atribuído\n                        </span>\n                      )}\n                    </div>\n                    <span>\n                      {new Date(ride.requestedAt).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":17978},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 0, // Allow queries to become stale immediately so refetchInterval works\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1446},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/driver-register.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { insertDriverSchema, type InsertDriver } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { UserPlus, ArrowLeft } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst driverRegisterSchema = insertDriverSchema.extend({\n  name: z.string().min(3, \"Nome deve ter pelo menos 3 caracteres\"),\n  phone: z.string().min(10, \"Telefone deve ter pelo menos 10 dígitos\"),\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter no mínimo 6 caracteres\"),\n  vehicleModel: z.string().min(2, \"Modelo do veículo é obrigatório\"),\n  vehiclePlate: z.string().min(7, \"Placa deve ter pelo menos 7 caracteres\"),\n  pixKey: z.string().min(11, \"Chave Pix é obrigatória (CPF, CNPJ, email ou telefone)\"),\n  termsAccepted: z.literal(1, { errorMap: () => ({ message: \"Você deve aceitar os termos para continuar\" }) }),\n});\n\nexport default function DriverRegister() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<InsertDriver>({\n    resolver: zodResolver(driverRegisterSchema),\n    defaultValues: {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      password: \"\",\n      vehicleModel: \"\",\n      vehiclePlate: \"\",\n      pixKey: \"\",\n      termsAccepted: undefined,\n      isOnline: 0,\n      latitude: \"\",\n      longitude: \"\",\n    },\n  });\n\n  const createDriverMutation = useMutation({\n    mutationFn: async (data: InsertDriver) => {\n      return await apiRequest(\"POST\", \"/api/driver\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/drivers\"] });\n      toast({\n        title: \"Cadastro enviado!\",\n        description: \"Seu cadastro foi realizado com sucesso. Aguarde a aprovação do administrador para fazer login.\",\n      });\n      form.reset();\n      setTimeout(() => navigate(\"/motorista/login\"), 2000);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao cadastrar\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertDriver) => {\n    createDriverMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header activeTab=\"passenger\" onTabChange={() => {}} />\n      \n      <main className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => navigate(\"/\")}\n          className=\"mb-6\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Voltar\n        </Button>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                <UserPlus className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <div>\n                <CardTitle>Cadastro de Motorista</CardTitle>\n                <CardDescription>\n                  Preencha os dados abaixo. Após o cadastro, aguarde a aprovação para fazer login.\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Completo</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Digite seu nome completo\"\n                          {...field}\n                          data-testid=\"input-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Telefone</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"(21) 98765-4321\"\n                          {...field}\n                          data-testid=\"input-phone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"seu@email.com\"\n                          {...field}\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Senha</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Mínimo 6 caracteres\"\n                          {...field}\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"vehicleModel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Modelo do Veículo</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Fiat Uno, Volkswagen Gol\"\n                          {...field}\n                          data-testid=\"input-vehicle-model\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"vehiclePlate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Placa do Veículo</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"ABC-1234\"\n                          {...field}\n                          data-testid=\"input-vehicle-plate\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"pixKey\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Chave Pix</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"CPF, CNPJ, email ou telefone\"\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-pix-key\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"border border-border rounded-lg p-4 bg-muted/30\">\n                  <h3 className=\"font-semibold mb-3 text-sm\">Termos e Condições</h3>\n                  <div className=\"text-xs text-muted-foreground space-y-2 mb-4\">\n                    <p>\n                      • Será descontado <strong>R$ 1,00</strong> por cada corrida efetuada como taxa da plataforma.\n                    </p>\n                    <p>\n                      • Você pode solicitar o saque dos valores acumulados a qualquer momento através do painel do motorista.\n                    </p>\n                    <p>\n                      • A tecnok não se responsabiliza por avarias, roubos, acidentes envolvendo feridos ou morte.\n                    </p>\n                    <p>\n                      • Não há vínculo empregatício entre você e a tecnok. Você é um prestador de serviço autônomo.\n                    </p>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"termsAccepted\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value === 1}\n                            onCheckedChange={(checked) => {\n                              field.onChange(checked ? 1 : undefined);\n                            }}\n                            data-testid=\"checkbox-terms\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel className=\"text-sm font-medium\">\n                            Li e aceito os termos e condições\n                          </FormLabel>\n                          <FormMessage />\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createDriverMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createDriverMutation.isPending ? \"Cadastrando...\" : \"Cadastrar Motorista\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11057},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PassengerPanel from \"@/components/passenger-panel\";\nimport DriverPanel from \"@/components/driver-panel\";\nimport MapPanel from \"@/components/map-panel\";\nimport logoPath from \"@assets/logo_1759191818061.png\";\nimport videoPath from \"@assets/tecnok_ Segurança e Praticidade no Transporte!_1759234678136.mp4\";\nimport { Mail, Play, Car, Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype TabType = \"passenger\" | \"driver\" | \"map\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\nexport default function Home() {\n  const [activeTab, setActiveTab] = useState<TabType>(\"passenger\");\n  const [, navigate] = useLocation();\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showInstallButton, setShowInstallButton] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n      setShowInstallButton(true);\n    };\n\n    window.addEventListener('beforeinstallprompt', handler);\n\n    window.addEventListener('appinstalled', () => {\n      setShowInstallButton(false);\n      toast({\n        title: \"App Instalado!\",\n        description: \"tecnok foi instalado com sucesso no seu dispositivo.\",\n      });\n    });\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handler);\n    };\n  }, [toast]);\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) {\n      toast({\n        title: \"Instalação não disponível\",\n        description: \"Para instalar: No menu do navegador (⋮), selecione 'Adicionar à tela inicial' ou 'Instalar app'\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    deferredPrompt.prompt();\n    const { outcome } = await deferredPrompt.userChoice;\n    \n    if (outcome === 'accepted') {\n      setShowInstallButton(false);\n    }\n    \n    setDeferredPrompt(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header activeTab={activeTab} onTabChange={setActiveTab} />\n      \n      <div className=\"container mx-auto px-4 py-8 flex justify-center items-center gap-6\">\n        <img \n          src={logoPath} \n          alt=\"USB-TECNOK Logo\" \n          className=\"h-24 w-auto object-contain\"\n          data-testid=\"img-logo\"\n        />\n        <div className=\"flex items-center gap-3\">\n          {showInstallButton && (\n            <Button\n              onClick={handleInstallClick}\n              className=\"flex items-center gap-2 bg-purple-600 hover:bg-purple-700 text-white shadow-lg\"\n              data-testid=\"button-install-app\"\n            >\n              <Download className=\"w-5 h-5\" />\n              <span className=\"font-medium\">Instalar App</span>\n            </Button>\n          )}\n          <Button\n            onClick={() => navigate(\"/motorista/login\")}\n            className=\"flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white shadow-lg\"\n            data-testid=\"button-driver-area\"\n          >\n            <Car className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Área do Motorista</span>\n          </Button>\n          <a \n            href=\"mailto:contato@tecnok.com.br\"\n            className=\"flex items-center justify-center w-14 h-14 rounded-full bg-primary hover:bg-primary/90 transition-colors shadow-lg\"\n            title=\"Contato\"\n            data-testid=\"link-contact\"\n          >\n            <Mail className=\"w-6 h-6 text-primary-foreground\" />\n          </a>\n        </div>\n      </div>\n\n      <section className=\"container mx-auto px-4 pb-8\">\n        <div className=\"bg-gradient-to-r from-blue-500 to-indigo-600 rounded-2xl shadow-2xl overflow-hidden\">\n          <div className=\"p-6 text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-4\">\n              <Play className=\"w-6 h-6 text-white\" />\n              <h2 className=\"text-2xl font-bold text-white\">\n                Conheça a tecnok\n              </h2>\n            </div>\n            <p className=\"text-blue-100 mb-6\">\n              Segurança e praticidade no transporte da sua comunidade\n            </p>\n            <div className=\"relative rounded-xl overflow-hidden shadow-2xl max-w-4xl mx-auto\">\n              <video \n                controls \n                className=\"w-full\"\n                data-testid=\"video-promotional\"\n                poster=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1920' height='1080'%3E%3Crect fill='%232563eb' width='1920' height='1080'/%3E%3C/svg%3E\"\n              >\n                <source src={videoPath} type=\"video/mp4\" />\n                Seu navegador não suporta a reprodução de vídeos.\n              </video>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        {activeTab === \"passenger\" && <PassengerPanel />}\n        {activeTab === \"driver\" && <DriverPanel />}\n        {activeTab === \"map\" && <MapPanel />}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5429},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/driver-login.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { driverLoginSchema, type DriverLogin } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LogIn, ArrowLeft, UserPlus } from \"lucide-react\";\n\nexport default function DriverLogin() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<DriverLogin>({\n    resolver: zodResolver(driverLoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: DriverLogin) => {\n      const response = await apiRequest(\"POST\", \"/api/driver/login\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login realizado!\",\n        description: \"Bem-vindo de volta!\",\n      });\n      navigate(\"/motorista/painel\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao fazer login\",\n        description: error.message || \"Email ou senha inválidos\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: DriverLogin) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header activeTab=\"passenger\" onTabChange={() => {}} />\n      \n      <main className=\"container mx-auto px-4 py-8 max-w-md\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => navigate(\"/\")}\n          className=\"mb-6\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Voltar\n        </Button>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                <LogIn className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <div>\n                <CardTitle>Login do Motorista</CardTitle>\n                <CardDescription>\n                  Entre com seu email e senha\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"seu@email.com\"\n                          {...field}\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Senha</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Digite sua senha\"\n                          {...field}\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {loginMutation.isPending ? \"Entrando...\" : \"Entrar\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Ainda não é motorista parceiro?\n              </p>\n              <Button\n                variant=\"outline\"\n                onClick={() => navigate(\"/cadastro-motorista\")}\n                data-testid=\"button-register\"\n              >\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Cadastre-se aqui\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5111},"client/src/pages/driver-panel-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { type Driver, type Payment } from \"@shared/schema\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { LogOut, Loader2, Wallet, TrendingUp, DollarSign, Minus, CheckCircle, Calendar } from \"lucide-react\";\nimport DriverPanel from \"@/components/driver-panel\";\nimport { format } from \"date-fns\";\n\nexport default function DriverPanelPage() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const { data: driver, isLoading, error } = useQuery<Driver>({\n    queryKey: [\"/api/driver/me\"],\n    retry: false,\n  });\n\n  const { data: earnings } = useQuery<{\n    completedRides: number;\n    totalEarnings: number;\n    platformFee: number;\n    netEarnings: number;\n    pixKey: string | null;\n  }>({\n    queryKey: [`/api/driver/earnings/${driver?.id}`],\n    enabled: !!driver?.id,\n  });\n\n  const { data: payments } = useQuery<Payment[]>({\n    queryKey: [`/api/driver/payments/${driver?.id}`],\n    enabled: !!driver?.id,\n  });\n\n  useEffect(() => {\n    if (error) {\n      navigate(\"/motorista/login\");\n    }\n  }, [error, navigate]);\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/driver/logout\", {});\n      toast({\n        title: \"Logout realizado\",\n        description: \"Até breve!\",\n      });\n      navigate(\"/motorista/login\");\n    } catch (error) {\n      toast({\n        title: \"Erro ao fazer logout\",\n        description: \"Tente novamente\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground font-sans flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!driver) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans\">\n      <Header activeTab=\"driver\" onTabChange={() => {}} />\n      \n      <div className=\"container mx-auto px-4 py-6\">\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-xl\">Bem-vindo, {driver.name}!</CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {driver.email}\n                </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Sair\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <p className=\"text-muted-foreground\">Veículo</p>\n                <p className=\"font-medium\">{driver.vehicleModel}</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Placa</p>\n                <p className=\"font-medium\">{driver.vehiclePlate}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-6 border-primary/20\">\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                <Wallet className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div>\n                <CardTitle>Seus Ganhos</CardTitle>\n                <CardDescription>\n                  Resumo financeiro das suas corridas\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {earnings ? (\n              <>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <TrendingUp className=\"w-4 h-4 text-muted-foreground\" />\n                      <p className=\"text-xs text-muted-foreground\">Corridas</p>\n                    </div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-completed-rides\">\n                      {earnings.completedRides}\n                    </p>\n                  </div>\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <DollarSign className=\"w-4 h-4 text-muted-foreground\" />\n                      <p className=\"text-xs text-muted-foreground\">Total Ganho</p>\n                    </div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-total-earnings\">\n                      R$ {earnings.totalEarnings.toFixed(2).replace('.', ',')}\n                    </p>\n                  </div>\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Minus className=\"w-4 h-4 text-muted-foreground\" />\n                      <p className=\"text-xs text-muted-foreground\">Taxa Plataforma</p>\n                    </div>\n                    <p className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\" data-testid=\"text-platform-fee\">\n                      R$ {earnings.platformFee.toFixed(2).replace('.', ',')}\n                    </p>\n                  </div>\n                  <div className=\"bg-primary/10 p-4 rounded-lg border-2 border-primary/20\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Wallet className=\"w-4 h-4 text-primary\" />\n                      <p className=\"text-xs font-medium text-primary\">A Receber</p>\n                    </div>\n                    <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-net-earnings\">\n                      R$ {earnings.netEarnings.toFixed(2).replace('.', ',')}\n                    </p>\n                  </div>\n                </div>\n                {earnings.pixKey && (\n                  <div className=\"bg-muted/30 p-4 rounded-lg border border-border\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Sua Chave Pix</p>\n                    <p className=\"font-medium text-sm\" data-testid=\"text-driver-pix-key\">\n                      {earnings.pixKey}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Entre em contato com a administração para solicitar o saque dos seus ganhos.\n                    </p>\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-4 text-muted-foreground\">\n                <Loader2 className=\"w-6 h-6 animate-spin mx-auto mb-2\" />\n                <p className=\"text-sm\">Carregando informações financeiras...</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-green-500/10 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <div>\n                <CardTitle>Pagamentos Recebidos</CardTitle>\n                <CardDescription>\n                  Histórico de pagamentos realizados pela plataforma\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {payments === undefined ? (\n              <div className=\"text-center py-4 text-muted-foreground\">\n                <Loader2 className=\"w-6 h-6 animate-spin mx-auto mb-2\" />\n                <p className=\"text-sm\">Carregando histórico...</p>\n              </div>\n            ) : payments.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Wallet className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p className=\"text-sm\">Nenhum pagamento recebido ainda</p>\n                <p className=\"text-xs mt-1\">\n                  Entre em contato com a administração para solicitar seu saque\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {payments.map((payment) => (\n                  <div\n                    key={payment.id}\n                    className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg border border-border hover:bg-muted/50 transition-colors\"\n                    data-testid={`payment-${payment.id}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-10 h-10 bg-green-500/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-sm\">\n                          Pagamento via Pix\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Chave: {payment.pixKey}\n                        </p>\n                        <div className=\"flex items-center gap-1 mt-1 text-xs text-muted-foreground\">\n                          <Calendar className=\"w-3 h-3\" />\n                          <span>\n                            {format(new Date(payment.paidAt), \"dd/MM/yyyy 'às' HH:mm\")}\n                          </span>\n                        </div>\n                        {payment.notes && (\n                          <p className=\"text-xs text-muted-foreground mt-1 italic\">\n                            {payment.notes}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-xl font-bold text-green-600 dark:text-green-400\">\n                        R$ {parseFloat(payment.amount.toString()).toFixed(2).replace('.', ',')}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <DriverPanel />\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10814},"server/routes/driver.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertDriverSchema, driverLoginSchema } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport { ensureAdmin } from \"../middleware/admin-auth\";\n\nconst router = Router();\n\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const driverData = insertDriverSchema.parse(req.body);\n    const hashedPassword = await bcrypt.hash(driverData.password, 10);\n    const driver = await storage.createDriver({\n      ...driverData,\n      password: hashedPassword,\n    });\n    const { password, ...driverWithoutPassword } = driver;\n    res.json(driverWithoutPassword);\n  } catch (error) {\n    res.status(400).json({ error: \"Invalid driver data\" });\n  }\n});\n\nrouter.post(\"/login\", async (req, res) => {\n  try {\n    const { email, password } = driverLoginSchema.parse(req.body);\n    const driver = await storage.getDriverByEmail(email);\n    \n    if (!driver) {\n      return res.status(401).json({ error: \"Email ou senha inválidos\" });\n    }\n    \n    const isValidPassword = await bcrypt.compare(password, driver.password);\n    \n    if (!isValidPassword) {\n      return res.status(401).json({ error: \"Email ou senha inválidos\" });\n    }\n    \n    if (driver.isApproved !== 1) {\n      return res.status(403).json({ error: \"Cadastro ainda não aprovado. Aguarde a aprovação do administrador.\" });\n    }\n    \n    if (!req.session) {\n      return res.status(500).json({ error: \"Session not configured\" });\n    }\n    \n    req.session.driverId = driver.id;\n    \n    req.session.save((err) => {\n      if (err) {\n        console.error(\"Session save error:\", err);\n        return res.status(500).json({ error: \"Erro ao salvar sessão\" });\n      }\n      \n      const { password: _, ...driverWithoutPassword } = driver;\n      res.json(driverWithoutPassword);\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(400).json({ error: \"Dados de login inválidos\" });\n  }\n});\n\nrouter.post(\"/logout\", async (req, res) => {\n  if (req.session) {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ error: \"Erro ao fazer logout\" });\n      }\n      res.json({ message: \"Logout realizado com sucesso\" });\n    });\n  } else {\n    res.json({ message: \"Nenhuma sessão ativa\" });\n  }\n});\n\nrouter.get(\"/me\", async (req, res) => {\n  try {\n    if (!req.session?.driverId) {\n      return res.status(401).json({ error: \"Não autenticado\" });\n    }\n    \n    const driver = await storage.getDriverById(req.session.driverId);\n    if (!driver) {\n      return res.status(404).json({ error: \"Motorista não encontrado\" });\n    }\n    \n    const { password, ...driverWithoutPassword } = driver;\n    res.json(driverWithoutPassword);\n  } catch (error) {\n    res.status(500).json({ error: \"Erro ao buscar dados do motorista\" });\n  }\n});\n\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const drivers = await storage.getAllDrivers();\n    const driversWithoutPassword = drivers.map(({ password, ...driver }) => driver);\n    res.json(driversWithoutPassword);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch drivers\" });\n  }\n});\n\nrouter.get(\"/all\", async (req, res) => {\n  try {\n    const allDrivers = await storage.getAllDrivers();\n    const driversWithoutPassword = allDrivers.map(({ password, ...driver }) => driver);\n    res.json(driversWithoutPassword);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch all drivers\" });\n  }\n});\n\nrouter.patch(\"/:id/status\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { isOnline } = req.body;\n    \n    const updatedDriver = await storage.updateDriverStatus(id, isOnline);\n    if (!updatedDriver) {\n      return res.status(404).json({ error: \"Driver not found\" });\n    }\n    \n    const { password, ...driverWithoutPassword } = updatedDriver;\n    res.json(driverWithoutPassword);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to update driver status\" });\n  }\n});\n\nrouter.patch(\"/:id/location\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { latitude, longitude } = req.body;\n    \n    const updatedDriver = await storage.updateDriverLocation(id, latitude, longitude);\n    if (!updatedDriver) {\n      return res.status(404).json({ error: \"Driver not found\" });\n    }\n    \n    const { password, ...driverWithoutPassword } = updatedDriver;\n    res.json(driverWithoutPassword);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to update driver location\" });\n  }\n});\n\nrouter.get(\"/pending\", ensureAdmin, async (req, res) => {\n  try {\n    const allDrivers = await storage.getAllDrivers();\n    const pendingDrivers = allDrivers\n      .filter(driver => driver.isApproved === 0)\n      .map(({ password, ...driver }) => driver);\n    res.json(pendingDrivers);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch pending drivers\" });\n  }\n});\n\nrouter.patch(\"/:id/approve\", ensureAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const updatedDriver = await storage.approveDriver(id);\n    \n    if (!updatedDriver) {\n      return res.status(404).json({ error: \"Driver not found\" });\n    }\n    \n    const { password, ...driverWithoutPassword } = updatedDriver;\n    res.json(driverWithoutPassword);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to approve driver\" });\n  }\n});\n\nrouter.get(\"/rides/pending\", async (req, res) => {\n  try {\n    const pendingRides = await storage.getPendingRides();\n    res.json(pendingRides);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch pending rides\" });\n  }\n});\n\nrouter.get(\"/rides/active\", async (req, res) => {\n  try {\n    const { driverId } = req.query;\n    if (!driverId) {\n      return res.status(400).json({ error: \"driverId is required\" });\n    }\n    const activeRides = await storage.getActiveRidesByDriver(driverId as string);\n    res.json(activeRides);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch active rides\" });\n  }\n});\n\nrouter.patch(\"/rides/:id/status\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status, driverId } = req.body;\n    \n    const updatedRide = await storage.updateRideStatus(id, status, driverId);\n    if (!updatedRide) {\n      return res.status(404).json({ error: \"Ride not found\" });\n    }\n    \n    res.json(updatedRide);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to update ride status\" });\n  }\n});\n\nrouter.get(\"/earnings/:driverId\", async (req, res) => {\n  try {\n    if (!req.session?.driverId) {\n      return res.status(401).json({ error: \"Não autenticado\" });\n    }\n    \n    const { driverId } = req.params;\n    \n    if (req.session.driverId !== driverId) {\n      return res.status(403).json({ error: \"Não autorizado a acessar esses dados\" });\n    }\n    \n    const earnings = await storage.getDriverEarnings(driverId);\n    res.json(earnings);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch driver earnings\" });\n  }\n});\n\nrouter.get(\"/payments/:driverId\", async (req, res) => {\n  try {\n    if (!req.session?.driverId) {\n      return res.status(401).json({ error: \"Não autenticado\" });\n    }\n    \n    const { driverId } = req.params;\n    \n    if (req.session.driverId !== driverId) {\n      return res.status(403).json({ error: \"Não autorizado a acessar esses dados\" });\n    }\n    \n    const payments = await storage.getDriverPayments(driverId);\n    res.json(payments);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch driver payments\" });\n  }\n});\n\nexport default router;\n","size_bytes":7583},"server/routes/passenger.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertRideSchema, insertPassengerSchema } from \"@shared/schema\";\n\nconst router = Router();\n\nfunction normalizeRoute(str: string): string {\n  return str\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .trim()\n    .replace(/\\s+/g, \" \");\n}\n\nrouter.post(\"/rides\", async (req, res) => {\n  try {\n    const { passengerName, passengerPhone, ...rideFields } = req.body;\n    \n    let passenger = await storage.getPassengerByPhone(passengerPhone);\n    if (!passenger) {\n      passenger = await storage.createPassenger({\n        name: passengerName || \"Passageiro\",\n        phone: passengerPhone\n      });\n    }\n\n    const routeKey = `${rideFields.origin} - ${rideFields.destination}`;\n    const normalizedInput = normalizeRoute(routeKey);\n    \n    const allRoutePrices = await storage.getAllRoutePrices();\n    const matchedRoute = allRoutePrices.find(rp => \n      normalizeRoute(rp.route) === normalizedInput\n    );\n    \n    let estimatedPrice: string;\n    if (matchedRoute) {\n      estimatedPrice = `R$ ${matchedRoute.price}`;\n    } else {\n      estimatedPrice = `R$ ${(15 + Math.random() * 20).toFixed(2)}`;\n    }\n\n    const rideData = insertRideSchema.parse({\n      origin: rideFields.origin,\n      destination: rideFields.destination,\n      passengerCount: rideFields.passengerCount,\n      passengerId: passenger.id,\n      status: \"pending\",\n      estimatedPrice,\n      driverId: null\n    });\n\n    const ride = await storage.createRide(rideData);\n    res.json(ride);\n  } catch (error) {\n    res.status(400).json({ error: \"Invalid ride data\" });\n  }\n});\n\nrouter.get(\"/rides\", async (req, res) => {\n  try {\n    const rides = await storage.getAllRides();\n    res.json(rides);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch rides\" });\n  }\n});\n\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const passengerData = insertPassengerSchema.parse(req.body);\n    const passenger = await storage.createPassenger(passengerData);\n    res.json(passenger);\n  } catch (error) {\n    res.status(400).json({ error: \"Invalid passenger data\" });\n  }\n});\n\nrouter.get(\"/route-prices\", async (req, res) => {\n  try {\n    const routePrices = await storage.getAllRoutePrices();\n    res.json(routePrices);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch route prices\" });\n  }\n});\n\nexport default router;\n","size_bytes":2434},"client/public/sw.js":{"content":"const CACHE_NAME = 'tecnok-v9';\nconst urlsToCache = [\n  '/manifest.json',\n  '/icon-192.png',\n  '/icon-512.png',\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Cache aberto');\n        return cache.addAll(urlsToCache);\n      })\n  );\n  self.skipWaiting();\n});\n\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n  \n  // Ignora chrome-extension e outras URLs inválidas\n  if (!url.protocol.startsWith('http')) {\n    return;\n  }\n  \n  // Não interferir com API calls - deixa passar direto\n  if (url.pathname.startsWith('/api/')) {\n    return;\n  }\n  \n  // Network-first para navegação (HTML)\n  if (request.mode === 'navigate' || request.headers.get('accept')?.includes('text/html')) {\n    event.respondWith(\n      fetch(request)\n        .then((response) => {\n          return response;\n        })\n        .catch(() => {\n          return caches.match(request);\n        })\n    );\n    return;\n  }\n  \n  // Cache-first para assets estáticos (apenas GET)\n  if (request.method !== 'GET') {\n    return;\n  }\n  \n  event.respondWith(\n    caches.match(request)\n      .then((response) => {\n        if (response) {\n          return response;\n        }\n        return fetch(request).then(\n          (response) => {\n            if (!response || response.status !== 200 || response.type !== 'basic') {\n              return response;\n            }\n            const responseToCache = response.clone();\n            caches.open(CACHE_NAME)\n              .then((cache) => {\n                cache.put(request, responseToCache);\n              });\n            return response;\n          }\n        );\n      })\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  const cacheWhitelist = [CACHE_NAME];\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  self.clients.claim();\n});\n","size_bytes":2139},"client/src/components/pix-payment-modal.tsx":{"content":"import { Copy, CheckCircle, Wallet, QrCode } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PixPaymentModalProps {\n  open: boolean;\n  onClose: () => void;\n  rideDetails: {\n    id: string;\n    origin: string;\n    destination: string;\n    price: string;\n    passengerName?: string;\n  };\n}\n\nexport default function PixPaymentModal({ open, onClose, rideDetails }: PixPaymentModalProps) {\n  const { toast } = useToast();\n  const [copied, setCopied] = useState(false);\n  const [qrCodeData, setQrCodeData] = useState<{ qrCode: string; pixPayload: string } | null>(null);\n  const [paymentMethod, setPaymentMethod] = useState<\"pix\" | \"cash\">(\"pix\");\n\n  const handleClose = async () => {\n    // Save payment method before closing\n    try {\n      await apiRequest(\"PATCH\", `/api/rides/${rideDetails.id}/payment-method`, {\n        paymentMethod\n      });\n    } catch (error) {\n      console.error(\"Error saving payment method:\", error);\n    }\n    onClose();\n  };\n\n  const pixRecipient = {\n    name: \"Aparecido de Góes\",\n    cpf: \"072.176.408-81\",\n    cpfRaw: \"07217640881\",\n  };\n\n  const priceValue = rideDetails.price.replace('R$', '').trim().replace(',', '.');\n\n  useEffect(() => {\n    if (open && paymentMethod === \"pix\") {\n      apiRequest(\"POST\", \"/api/payments/pix-qrcode\", {\n        amount: priceValue,\n        description: `Corrida ${rideDetails.id.slice(0, 8)}`\n      }).then(res => res.json())\n        .then((data: any) => setQrCodeData(data))\n        .catch((err) => {\n          console.error(\"Error fetching QR Code:\", err);\n          toast({\n            title: \"Erro ao gerar QR Code\",\n            description: \"Tente novamente\",\n            variant: \"destructive\"\n          });\n        });\n    }\n  }, [open, paymentMethod, priceValue, rideDetails.id, toast]);\n\n\n  const handleCopyPixKey = () => {\n    navigator.clipboard.writeText(pixRecipient.cpfRaw);\n    setCopied(true);\n    toast({\n      title: \"Chave Pix copiada!\",\n      description: \"Cole no app do seu banco para fazer o pagamento.\",\n    });\n    setTimeout(() => setCopied(false), 3000);\n  };\n\n  const handleCopyPixPayload = (payload: string) => {\n    navigator.clipboard.writeText(payload);\n    toast({\n      title: \"Código Pix Copia e Cola copiado!\",\n      description: \"Cole no app do seu banco para fazer o pagamento automático.\",\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\" data-testid=\"modal-pix-payment\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"text-green-500 w-6 h-6\" />\n            Corrida Finalizada!\n          </DialogTitle>\n          <DialogDescription>\n            Escolha a forma de pagamento\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"p-4 bg-muted rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Detalhes da Corrida</h3>\n            <div className=\"space-y-1 text-sm\">\n              <p data-testid=\"text-pix-ride-id\">\n                <span className=\"text-muted-foreground\">ID:</span> #{rideDetails.id.slice(0, 8)}\n              </p>\n              <p data-testid=\"text-pix-origin\">\n                <span className=\"text-muted-foreground\">De:</span> {rideDetails.origin}\n              </p>\n              <p data-testid=\"text-pix-destination\">\n                <span className=\"text-muted-foreground\">Para:</span> {rideDetails.destination}\n              </p>\n              <p data-testid=\"text-pix-price\" className=\"font-bold text-lg text-primary pt-2\">\n                Valor: {rideDetails.price}\n              </p>\n            </div>\n          </div>\n\n          <Tabs value={paymentMethod} onValueChange={(v) => setPaymentMethod(v as \"pix\" | \"cash\")} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"pix\" data-testid=\"tab-payment-pix\">\n                <QrCode className=\"w-4 h-4 mr-2\" />\n                Pix\n              </TabsTrigger>\n              <TabsTrigger value=\"cash\" data-testid=\"tab-payment-cash\">\n                <Wallet className=\"w-4 h-4 mr-2\" />\n                Dinheiro\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"pix\" className=\"space-y-4 mt-4\">\n              {qrCodeData && (\n                <div className=\"flex flex-col items-center gap-4\">\n                  <div className=\"bg-white p-4 rounded-lg\">\n                    <img \n                      src={qrCodeData.qrCode} \n                      alt=\"QR Code Pix\" \n                      className=\"w-48 h-48\"\n                      data-testid=\"img-qr-code-pix\"\n                    />\n                  </div>\n                  <Button\n                    onClick={() => handleCopyPixPayload(qrCodeData.pixPayload)}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    data-testid=\"button-copy-pix-payload\"\n                  >\n                    <Copy className=\"w-4 h-4 mr-2\" />\n                    Copiar Código Pix Copia e Cola\n                  </Button>\n                </div>\n              )}\n\n              <div className=\"p-4 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950 dark:to-emerald-950 rounded-lg border-2 border-green-200 dark:border-green-800\">\n                <h3 className=\"font-semibold mb-3 flex items-center gap-2\">\n                  <span className=\"text-green-600 dark:text-green-400\">💰</span>\n                  Ou use a Chave Pix\n                </h3>\n                \n                <div className=\"space-y-2 text-sm\">\n                  <div>\n                    <p className=\"text-muted-foreground text-xs\">Beneficiário</p>\n                    <p data-testid=\"text-pix-recipient\" className=\"font-medium\">{pixRecipient.name}</p>\n                  </div>\n                  \n                  <div>\n                    <p className=\"text-muted-foreground text-xs\">Chave Pix (CPF)</p>\n                    <div className=\"flex items-center justify-between bg-white dark:bg-gray-900 p-2 rounded border\">\n                      <p data-testid=\"text-pix-key\" className=\"font-mono font-medium\">{pixRecipient.cpf}</p>\n                      <Button\n                        data-testid=\"button-copy-pix\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleCopyPixKey}\n                        className=\"h-8\"\n                      >\n                        {copied ? (\n                          <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                        ) : (\n                          <Copy className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"cash\" className=\"space-y-4 mt-4\">\n              <div className=\"p-4 bg-yellow-50 dark:bg-yellow-950 rounded-lg border-2 border-yellow-200 dark:border-yellow-800\">\n                <h3 className=\"font-semibold mb-2 flex items-center gap-2\">\n                  <Wallet className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400\" />\n                  Pagamento em Dinheiro\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Você receberá <strong>{rideDetails.price}</strong> em dinheiro do passageiro.\n                </p>\n              </div>\n\n              <div className=\"p-4 bg-blue-50 dark:bg-blue-950 rounded-lg border-2 border-blue-200 dark:border-blue-800\">\n                <h3 className=\"font-semibold mb-2 text-blue-700 dark:text-blue-300 flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5\" />\n                  Taxa da Plataforma\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  A taxa de <strong>R$ 1,00</strong> será automaticamente deduzida do seu saldo na plataforma.\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Você não precisa fazer nenhum pagamento agora. A taxa será descontada quando você solicitar o saque dos seus ganhos.\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          <Button\n            data-testid=\"button-close-pix-modal\"\n            onClick={handleClose}\n            className=\"w-full\"\n          >\n            Fechar\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8952},"client/src/pages/admin-drivers.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Clock, User, Phone, Mail, Car } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Driver } from \"@shared/schema\";\nimport { useAdminAuth } from \"@/hooks/use-admin-auth\";\n\nexport default function AdminDrivers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading } = useAdminAuth();\n\n  const { data: pendingDrivers = [], isLoading } = useQuery<Driver[]>({\n    queryKey: ['/api/driver/pending'],\n    enabled: isAuthenticated === true,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (driverId: string) => {\n      return apiRequest(\"PATCH\", `/api/driver/${driverId}/approve`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/driver/pending'] });\n      toast({\n        title: \"Motorista aprovado!\",\n        description: \"O motorista agora pode fazer login na plataforma.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao aprovar\",\n        description: \"Não foi possível aprovar o motorista. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">Verificando autenticação...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-6\">\n            Carregando...\n          </h1>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Administração de Motoristas\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Aprove novos motoristas para que possam acessar a plataforma\n          </p>\n        </div>\n\n        {pendingDrivers.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <CheckCircle className=\"h-16 w-16 text-green-500 mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                Nenhum motorista pendente\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 text-center\">\n                Todos os motoristas cadastrados já foram aprovados!\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {pendingDrivers.map((driver) => (\n              <Card key={driver.id} className=\"overflow-hidden\">\n                <CardHeader className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <User className=\"h-5 w-5\" />\n                        {driver.name}\n                      </CardTitle>\n                      <CardDescription className=\"text-blue-100 mt-1\">\n                        Aguardando aprovação\n                      </CardDescription>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"bg-yellow-500 text-white\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      Pendente\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2 text-gray-700 dark:text-gray-300\">\n                        <Phone className=\"h-4 w-4 text-gray-500\" />\n                        <span className=\"font-medium\">Telefone:</span>\n                        <span>{driver.phone}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-gray-700 dark:text-gray-300\">\n                        <Mail className=\"h-4 w-4 text-gray-500\" />\n                        <span className=\"font-medium\">Email:</span>\n                        <span>{driver.email}</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2 text-gray-700 dark:text-gray-300\">\n                        <Car className=\"h-4 w-4 text-gray-500\" />\n                        <span className=\"font-medium\">Veículo:</span>\n                        <span>{driver.vehicleModel}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-gray-700 dark:text-gray-300\">\n                        <Car className=\"h-4 w-4 text-gray-500\" />\n                        <span className=\"font-medium\">Placa:</span>\n                        <span>{driver.vehiclePlate}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end\">\n                    <Button\n                      onClick={() => approveMutation.mutate(driver.id)}\n                      disabled={approveMutation.isPending}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                      data-testid={`button-approve-${driver.id}`}\n                    >\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      {approveMutation.isPending ? \"Aprovando...\" : \"Aprovar Motorista\"}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6678},"client/src/pages/admin-payments.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DollarSign, RefreshCw, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAdminAuth } from \"@/hooks/use-admin-auth\";\n\nexport default function AdminPayments() {\n  const { isAuthenticated, isLoading: authLoading } = useAdminAuth();\n\n  const { data: allRides, refetch, isLoading } = useQuery({\n    queryKey: [\"/api/rides\"],\n    enabled: isAuthenticated === true,\n  });\n\n  const { data: allDrivers } = useQuery({\n    queryKey: [\"/api/drivers/all\"],\n    enabled: isAuthenticated === true,\n  });\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Verificando autenticação...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const calculateDriverEarnings = () => {\n    if (!allRides || !allDrivers || !Array.isArray(allDrivers)) return [];\n\n    return allDrivers.map((driver: any) => {\n      const driverRides = Array.isArray(allRides) \n        ? allRides.filter((ride: any) => ride.driverId === driver.id && ride.status === 'completed')\n        : [];\n\n      const totalRides = driverRides.length;\n      const totalEarnings = driverRides.reduce((sum: number, ride: any) => {\n        if (!ride.estimatedPrice) return sum;\n        const priceStr = ride.estimatedPrice\n          .replace('R$', '')\n          .replace('*', '')\n          .replace(',', '.')\n          .trim();\n        return sum + parseFloat(priceStr);\n      }, 0);\n\n      const platformFee = totalRides * 1.00;\n      const netAmount = totalEarnings - platformFee;\n\n      return {\n        ...driver,\n        totalRides,\n        totalEarnings,\n        platformFee,\n        netAmount\n      };\n    }).filter((d: any) => d.totalRides > 0);\n  };\n\n  const driverEarnings = calculateDriverEarnings();\n  const totalPlatformFees = driverEarnings.reduce((sum: number, d: any) => sum + d.platformFee, 0);\n  const totalToPayDrivers = driverEarnings.reduce((sum: number, d: any) => sum + d.netAmount, 0);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto py-8 px-4\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Pagamentos aos Motoristas</h1>\n            <p className=\"text-muted-foreground\">Valores a receber por motorista</p>\n          </div>\n          <Button onClick={() => refetch()} variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Atualizar\n          </Button>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <DollarSign className=\"w-5 h-5 mr-2 text-primary\" />\n                Total a Pagar aos Motoristas\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-3xl font-bold text-primary\">\n                R$ {totalToPayDrivers.toFixed(2).replace('.', ',')}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <TrendingUp className=\"w-5 h-5 mr-2 text-green-600\" />\n                Taxas da Plataforma\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-3xl font-bold text-green-600\">\n                R$ {totalPlatformFees.toFixed(2).replace('.', ',')}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <RefreshCw className=\"w-8 h-8 animate-spin mx-auto mb-4 text-primary\" />\n            <p className=\"text-muted-foreground\">Carregando...</p>\n          </div>\n        ) : driverEarnings.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <p className=\"text-muted-foreground\">Nenhum motorista com corridas completadas ainda.</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {driverEarnings.map((driver: any) => (\n              <Card key={driver.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"py-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-xl font-bold mb-2\">{driver.name}</h3>\n                      <div className=\"space-y-1 text-sm text-muted-foreground\">\n                        <p>📧 {driver.email}</p>\n                        <p>🚗 {driver.vehicleModel} - {driver.vehiclePlate}</p>\n                        {driver.pixKey && <p>💳 PIX: {driver.pixKey}</p>}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right space-y-2\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Corridas Completadas</p>\n                        <p className=\"text-2xl font-bold\">{driver.totalRides}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Ganhos Totais</p>\n                        <p className=\"text-lg font-semibold text-green-600\">\n                          R$ {driver.totalEarnings.toFixed(2).replace('.', ',')}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Taxa da Plataforma</p>\n                        <p className=\"text-sm font-medium text-red-600\">\n                          - R$ {driver.platformFee.toFixed(2).replace('.', ',')}\n                        </p>\n                      </div>\n                      <div className=\"pt-2 border-t\">\n                        <p className=\"text-sm text-muted-foreground\">A Receber</p>\n                        <p className=\"text-2xl font-bold text-primary\">\n                          R$ {driver.netAmount.toFixed(2).replace('.', ',')}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6732},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lock } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, senha: password }),\n        credentials: \"include\",\n      });\n\n      if (response.ok) {\n        window.location.href = \"/admin/motoristas\";\n      } else {\n        toast({\n          title: \"Erro no login\",\n          description: \"Credenciais inválidas\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao conectar com o servidor\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"p-3 bg-blue-100 dark:bg-blue-900 rounded-full\">\n              <Lock className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl text-center\">Painel Administrativo</CardTitle>\n          <CardDescription className=\"text-center\">\n            Digite a senha para acessar\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"admin@tecnok.com.br\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={isLoading}\n                data-testid=\"input-email\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Digite a senha\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={isLoading}\n                data-testid=\"input-password\"\n                required\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-submit\"\n            >\n              {isLoading ? \"Entrando...\" : \"Entrar\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3510},"client/src/hooks/use-admin-auth.ts":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport function useAdminAuth() {\n  const [, setLocation] = useLocation();\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await fetch(\"/api/admin/check\", {\n          credentials: \"include\",\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          setIsAuthenticated(data.authenticated);\n          \n          if (!data.authenticated) {\n            setLocation(\"/admin/login\");\n          }\n        } else {\n          setIsAuthenticated(false);\n          setLocation(\"/admin/login\");\n        }\n      } catch (error) {\n        console.error(\"Auth check error:\", error);\n        setIsAuthenticated(false);\n        setLocation(\"/admin/login\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, [setLocation]);\n\n  return { isAuthenticated, isLoading };\n}\n","size_bytes":1092},"server/middleware/admin-auth.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\n\nexport function ensureAdmin(req: Request, res: Response, next: NextFunction) {\n  if (req.session?.isAdmin === true) {\n    next();\n  } else {\n    res.status(401).json({ error: \"Acesso não autorizado. Faça login como administrador.\" });\n  }\n}\n","size_bytes":308}},"version":1}